
Uart_communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080062ac  080062ac  000162ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006334  08006334  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006334  08006334  00016334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800633c  0800633c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800633c  0800633c  0001633c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006340  08006340  00016340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  20000070  080063b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  080063b4  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160cd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026fc  00000000  00000000  0003616d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  00038870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  00039a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b13  00000000  00000000  0003ab88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f80  00000000  00000000  0006269b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f59d9  00000000  00000000  0007a61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016fff4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050c0  00000000  00000000  00170044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006294 	.word	0x08006294

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006294 	.word	0x08006294

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <read_ch_MCP3008>:

extern SPI_HandleTypeDef hspi2;

extern UART_HandleTypeDef huart1;

char read_ch_MCP3008(int ch){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]

	extern const uint8_t MCP3008_CH[8];
	unsigned char spi_buf[2];


	if (ch<8){// pour le premier MCP3008
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b07      	cmp	r3, #7
 80005c0:	dc19      	bgt.n	80005f6 <read_ch_MCP3008+0x42>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2108      	movs	r1, #8
 80005c6:	481e      	ldr	r0, [pc, #120]	; (8000640 <read_ch_MCP3008+0x8c>)
 80005c8:	f001 fca4 	bl	8001f14 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t *)&MCP3008_CH[ch], 1, 100);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a1d      	ldr	r2, [pc, #116]	; (8000644 <read_ch_MCP3008+0x90>)
 80005d0:	1899      	adds	r1, r3, r2
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	2201      	movs	r2, #1
 80005d6:	481c      	ldr	r0, [pc, #112]	; (8000648 <read_ch_MCP3008+0x94>)
 80005d8:	f003 fab9 	bl	8003b4e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t *)spi_buf, 1, 100);
 80005dc:	f107 010c 	add.w	r1, r7, #12
 80005e0:	2364      	movs	r3, #100	; 0x64
 80005e2:	2201      	movs	r2, #1
 80005e4:	4818      	ldr	r0, [pc, #96]	; (8000648 <read_ch_MCP3008+0x94>)
 80005e6:	f003 fc20 	bl	8003e2a <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2108      	movs	r1, #8
 80005ee:	4814      	ldr	r0, [pc, #80]	; (8000640 <read_ch_MCP3008+0x8c>)
 80005f0:	f001 fc90 	bl	8001f14 <HAL_GPIO_WritePin>
 80005f4:	e019      	b.n	800062a <read_ch_MCP3008+0x76>
	}
	else{// pour le second MCP3008
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2140      	movs	r1, #64	; 0x40
 80005fa:	4814      	ldr	r0, [pc, #80]	; (800064c <read_ch_MCP3008+0x98>)
 80005fc:	f001 fc8a 	bl	8001f14 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t *)&MCP3008_CH[ch-8], 1, 100);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3b08      	subs	r3, #8
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <read_ch_MCP3008+0x90>)
 8000606:	1899      	adds	r1, r3, r2
 8000608:	2364      	movs	r3, #100	; 0x64
 800060a:	2201      	movs	r2, #1
 800060c:	480e      	ldr	r0, [pc, #56]	; (8000648 <read_ch_MCP3008+0x94>)
 800060e:	f003 fa9e 	bl	8003b4e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t *)spi_buf, 1, 100);
 8000612:	f107 010c 	add.w	r1, r7, #12
 8000616:	2364      	movs	r3, #100	; 0x64
 8000618:	2201      	movs	r2, #1
 800061a:	480b      	ldr	r0, [pc, #44]	; (8000648 <read_ch_MCP3008+0x94>)
 800061c:	f003 fc05 	bl	8003e2a <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	2140      	movs	r1, #64	; 0x40
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <read_ch_MCP3008+0x98>)
 8000626:	f001 fc75 	bl	8001f14 <HAL_GPIO_WritePin>
	}


	if(spi_buf[0]==(char)255){spi_buf[0]=(char)254;}
 800062a:	7b3b      	ldrb	r3, [r7, #12]
 800062c:	2bff      	cmp	r3, #255	; 0xff
 800062e:	d101      	bne.n	8000634 <read_ch_MCP3008+0x80>
 8000630:	23fe      	movs	r3, #254	; 0xfe
 8000632:	733b      	strb	r3, [r7, #12]

	return spi_buf[0];
 8000634:	7b3b      	ldrb	r3, [r7, #12]
	}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40022000 	.word	0x40022000
 8000644:	080062c0 	.word	0x080062c0
 8000648:	200000d8 	.word	0x200000d8
 800064c:	40021c00 	.word	0x40021c00

08000650 <send_matrix_uart_1>:

		uart_buf_len = sprintf(uart_buf, chaine);
		HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
}

void send_matrix_uart_1(void){
 8000650:	b580      	push	{r7, lr}
 8000652:	b0c2      	sub	sp, #264	; 0x108
 8000654:	af00      	add	r7, sp, #0

	extern char spi_buf[256];
	int uart_buf_len;
	char uart_buf[256];

	uart_buf_len = sprintf(uart_buf, "%c", 255);
 8000656:	463b      	mov	r3, r7
 8000658:	22ff      	movs	r2, #255	; 0xff
 800065a:	491b      	ldr	r1, [pc, #108]	; (80006c8 <send_matrix_uart_1+0x78>)
 800065c:	4618      	mov	r0, r3
 800065e:	f005 f9ab 	bl	80059b8 <siprintf>
 8000662:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
	HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000666:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800066a:	b29a      	uxth	r2, r3
 800066c:	4639      	mov	r1, r7
 800066e:	2364      	movs	r3, #100	; 0x64
 8000670:	4816      	ldr	r0, [pc, #88]	; (80006cc <send_matrix_uart_1+0x7c>)
 8000672:	f004 fcdd 	bl	8005030 <HAL_UART_Transmit>

	for(int k=0; k<256;k++){
 8000676:	2300      	movs	r3, #0
 8000678:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800067c:	e019      	b.n	80006b2 <send_matrix_uart_1+0x62>
		uart_buf_len = sprintf(uart_buf,"%c", (unsigned char)spi_buf[k]);
 800067e:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <send_matrix_uart_1+0x80>)
 8000680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000684:	4413      	add	r3, r2
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	463b      	mov	r3, r7
 800068c:	490e      	ldr	r1, [pc, #56]	; (80006c8 <send_matrix_uart_1+0x78>)
 800068e:	4618      	mov	r0, r3
 8000690:	f005 f992 	bl	80059b8 <siprintf>
 8000694:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
		HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000698:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800069c:	b29a      	uxth	r2, r3
 800069e:	4639      	mov	r1, r7
 80006a0:	2364      	movs	r3, #100	; 0x64
 80006a2:	480a      	ldr	r0, [pc, #40]	; (80006cc <send_matrix_uart_1+0x7c>)
 80006a4:	f004 fcc4 	bl	8005030 <HAL_UART_Transmit>
	for(int k=0; k<256;k++){
 80006a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006ac:	3301      	adds	r3, #1
 80006ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80006b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006b6:	2bff      	cmp	r3, #255	; 0xff
 80006b8:	dde1      	ble.n	800067e <send_matrix_uart_1+0x2e>
	}


}
 80006ba:	bf00      	nop
 80006bc:	bf00      	nop
 80006be:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	080062bc 	.word	0x080062bc
 80006cc:	20000188 	.word	0x20000188
 80006d0:	20000298 	.word	0x20000298

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f001 f901 	bl	80018de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006dc:	f000 f82e 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f000 f9b0 	bl	8000a44 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006e4:	f000 f94e 	bl	8000984 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80006e8:	f000 f8d4 	bl	8000894 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 80006ec:	f000 f97a 	bl	80009e4 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 80006f0:	f000 f90e 	bl	8000910 <MX_TIM6_Init>
  MX_I2C1_Init();
 80006f4:	f000 f88e 	bl	8000814 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  mcp23017_init(&hmcp, &hi2c1, MCP23017_ADDRESS_20);
 80006f8:	2220      	movs	r2, #32
 80006fa:	490c      	ldr	r1, [pc, #48]	; (800072c <main+0x58>)
 80006fc:	480c      	ldr	r0, [pc, #48]	; (8000730 <main+0x5c>)
 80006fe:	f000 fdd6 	bl	80012ae <mcp23017_init>
  mcp23017_iodir(&hmcp, MCP23017_PORTA, MCP23017_IODIR_ALL_OUTPUT);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	480a      	ldr	r0, [pc, #40]	; (8000730 <main+0x5c>)
 8000708:	f000 fe00 	bl	800130c <mcp23017_iodir>
  mcp23017_iodir(&hmcp, MCP23017_PORTB, MCP23017_IODIR_ALL_OUTPUT);
 800070c:	2200      	movs	r2, #0
 800070e:	2101      	movs	r1, #1
 8000710:	4807      	ldr	r0, [pc, #28]	; (8000730 <main+0x5c>)
 8000712:	f000 fdfb 	bl	800130c <mcp23017_iodir>


  // CS pin high by default
   HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	2108      	movs	r1, #8
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <main+0x60>)
 800071c:	f001 fbfa 	bl	8001f14 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2140      	movs	r1, #64	; 0x40
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <main+0x64>)
 8000726:	f001 fbf5 	bl	8001f14 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800072a:	e7fe      	b.n	800072a <main+0x56>
 800072c:	2000008c 	.word	0x2000008c
 8000730:	20000290 	.word	0x20000290
 8000734:	40022000 	.word	0x40022000
 8000738:	40021c00 	.word	0x40021c00

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	; 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	2230      	movs	r2, #48	; 0x30
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f005 f92c 	bl	80059a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	4b2a      	ldr	r3, [pc, #168]	; (800080c <SystemClock_Config+0xd0>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a29      	ldr	r2, [pc, #164]	; (800080c <SystemClock_Config+0xd0>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b27      	ldr	r3, [pc, #156]	; (800080c <SystemClock_Config+0xd0>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	4b25      	ldr	r3, [pc, #148]	; (8000810 <SystemClock_Config+0xd4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a24      	ldr	r2, [pc, #144]	; (8000810 <SystemClock_Config+0xd4>)
 800077e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b22      	ldr	r3, [pc, #136]	; (8000810 <SystemClock_Config+0xd4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000790:	2302      	movs	r3, #2
 8000792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000798:	2310      	movs	r3, #16
 800079a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
 800079e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a4:	2308      	movs	r3, #8
 80007a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 80007a8:	23c8      	movs	r3, #200	; 0xc8
 80007aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	f107 0320 	add.w	r3, r7, #32
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 f8a3 	bl	8002904 <HAL_RCC_OscConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007c4:	f000 fd6e 	bl	80012a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007c8:	f002 f84c 	bl	8002864 <HAL_PWREx_EnableOverDrive>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007d2:	f000 fd67 	bl	80012a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2302      	movs	r3, #2
 80007dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2106      	movs	r1, #6
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 fb29 	bl	8002e4c <HAL_RCC_ClockConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000800:	f000 fd50 	bl	80012a4 <Error_Handler>
  }
}
 8000804:	bf00      	nop
 8000806:	3750      	adds	r7, #80	; 0x50
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40007000 	.word	0x40007000

08000814 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_I2C1_Init+0x74>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <MX_I2C1_Init+0x78>)
 800081c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_I2C1_Init+0x74>)
 8000820:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <MX_I2C1_Init+0x7c>)
 8000822:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_I2C1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_I2C1_Init+0x74>)
 800082c:	2201      	movs	r2, #1
 800082e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_I2C1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_I2C1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_I2C1_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_I2C1_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_I2C1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084e:	480e      	ldr	r0, [pc, #56]	; (8000888 <MX_I2C1_Init+0x74>)
 8000850:	f001 fb7a 	bl	8001f48 <HAL_I2C_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800085a:	f000 fd23 	bl	80012a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800085e:	2100      	movs	r1, #0
 8000860:	4809      	ldr	r0, [pc, #36]	; (8000888 <MX_I2C1_Init+0x74>)
 8000862:	f001 ff67 	bl	8002734 <HAL_I2CEx_ConfigAnalogFilter>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800086c:	f000 fd1a 	bl	80012a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000870:	2100      	movs	r1, #0
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_I2C1_Init+0x74>)
 8000874:	f001 ffa9 	bl	80027ca <HAL_I2CEx_ConfigDigitalFilter>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800087e:	f000 fd11 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000008c 	.word	0x2000008c
 800088c:	40005400 	.word	0x40005400
 8000890:	00c0eaff 	.word	0x00c0eaff

08000894 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_SPI2_Init+0x74>)
 800089a:	4a1c      	ldr	r2, [pc, #112]	; (800090c <MX_SPI2_Init+0x78>)
 800089c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_SPI2_Init+0x74>)
 80008a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_SPI2_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_SPI2_Init+0x74>)
 80008ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_SPI2_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_SPI2_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_SPI2_Init+0x74>)
 80008c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_SPI2_Init+0x74>)
 80008ca:	2220      	movs	r2, #32
 80008cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_SPI2_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_SPI2_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_SPI2_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_SPI2_Init+0x74>)
 80008e2:	2207      	movs	r2, #7
 80008e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_SPI2_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_SPI2_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_SPI2_Init+0x74>)
 80008f4:	f003 f880 	bl	80039f8 <HAL_SPI_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008fe:	f000 fcd1 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200000d8 	.word	0x200000d8
 800090c:	40003800 	.word	0x40003800

08000910 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_TIM6_Init+0x6c>)
 8000922:	4a17      	ldr	r2, [pc, #92]	; (8000980 <MX_TIM6_Init+0x70>)
 8000924:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_TIM6_Init+0x6c>)
 8000928:	f242 720f 	movw	r2, #9999	; 0x270f
 800092c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_TIM6_Init+0x6c>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_TIM6_Init+0x6c>)
 8000936:	f240 32e7 	movw	r2, #999	; 0x3e7
 800093a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_TIM6_Init+0x6c>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000942:	480e      	ldr	r0, [pc, #56]	; (800097c <MX_TIM6_Init+0x6c>)
 8000944:	f003 ffb8 	bl	80048b8 <HAL_TIM_Base_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800094e:	f000 fca9 	bl	80012a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	4619      	mov	r1, r3
 800095e:	4807      	ldr	r0, [pc, #28]	; (800097c <MX_TIM6_Init+0x6c>)
 8000960:	f004 fa6c 	bl	8004e3c <HAL_TIMEx_MasterConfigSynchronization>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800096a:	f000 fc9b 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800096e:	4803      	ldr	r0, [pc, #12]	; (800097c <MX_TIM6_Init+0x6c>)
 8000970:	f003 fffa 	bl	8004968 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000013c 	.word	0x2000013c
 8000980:	40001000 	.word	0x40001000

08000984 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_USART1_UART_Init+0x58>)
 800098a:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <MX_USART1_UART_Init+0x5c>)
 800098c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_USART1_UART_Init+0x58>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_USART1_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_USART1_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_USART1_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_USART1_UART_Init+0x58>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_USART1_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_USART1_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_USART1_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_USART1_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_USART1_UART_Init+0x58>)
 80009c8:	f004 fae4 	bl	8004f94 <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009d2:	f000 fc67 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000188 	.word	0x20000188
 80009e0:	40011000 	.word	0x40011000

080009e4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_USART6_UART_Init+0x58>)
 80009ea:	4a15      	ldr	r2, [pc, #84]	; (8000a40 <MX_USART6_UART_Init+0x5c>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <MX_USART6_UART_Init+0x58>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_USART6_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_USART6_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_USART6_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_USART6_UART_Init+0x58>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_USART6_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_USART6_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_USART6_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_USART6_UART_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_USART6_UART_Init+0x58>)
 8000a28:	f004 fab4 	bl	8004f94 <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000a32:	f000 fc37 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2000020c 	.word	0x2000020c
 8000a40:	40011400 	.word	0x40011400

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b090      	sub	sp, #64	; 0x40
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a5a:	4bad      	ldr	r3, [pc, #692]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4aac      	ldr	r2, [pc, #688]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000a60:	f043 0310 	orr.w	r3, r3, #16
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4baa      	ldr	r3, [pc, #680]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0310 	and.w	r3, r3, #16
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a72:	4ba7      	ldr	r3, [pc, #668]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4aa6      	ldr	r2, [pc, #664]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4ba4      	ldr	r3, [pc, #656]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
 8000a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	4ba1      	ldr	r3, [pc, #644]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4aa0      	ldr	r2, [pc, #640]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b9e      	ldr	r3, [pc, #632]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	623b      	str	r3, [r7, #32]
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa2:	4b9b      	ldr	r3, [pc, #620]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a9a      	ldr	r2, [pc, #616]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b98      	ldr	r3, [pc, #608]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	61fb      	str	r3, [r7, #28]
 8000ab8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b95      	ldr	r3, [pc, #596]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a94      	ldr	r2, [pc, #592]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b92      	ldr	r3, [pc, #584]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	61bb      	str	r3, [r7, #24]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b8f      	ldr	r3, [pc, #572]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a8e      	ldr	r2, [pc, #568]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b8c      	ldr	r3, [pc, #560]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000aea:	4b89      	ldr	r3, [pc, #548]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a88      	ldr	r2, [pc, #544]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000af0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b86      	ldr	r3, [pc, #536]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b02:	4b83      	ldr	r3, [pc, #524]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a82      	ldr	r2, [pc, #520]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b80      	ldr	r3, [pc, #512]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b1a:	4b7d      	ldr	r3, [pc, #500]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a7c      	ldr	r2, [pc, #496]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000b20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b7a      	ldr	r3, [pc, #488]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b32:	4b77      	ldr	r3, [pc, #476]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a76      	ldr	r2, [pc, #472]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000b38:	f043 0320 	orr.w	r3, r3, #32
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b74      	ldr	r3, [pc, #464]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0320 	and.w	r3, r3, #32
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4a:	4b71      	ldr	r3, [pc, #452]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a70      	ldr	r2, [pc, #448]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b6e      	ldr	r3, [pc, #440]	; (8000d10 <MX_GPIO_Init+0x2cc>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	2120      	movs	r1, #32
 8000b66:	486b      	ldr	r0, [pc, #428]	; (8000d14 <MX_GPIO_Init+0x2d0>)
 8000b68:	f001 f9d4 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f241 010c 	movw	r1, #4108	; 0x100c
 8000b72:	4869      	ldr	r0, [pc, #420]	; (8000d18 <MX_GPIO_Init+0x2d4>)
 8000b74:	f001 f9ce 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2108      	movs	r1, #8
 8000b7c:	4867      	ldr	r0, [pc, #412]	; (8000d1c <MX_GPIO_Init+0x2d8>)
 8000b7e:	f001 f9c9 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8000b88:	4865      	ldr	r0, [pc, #404]	; (8000d20 <MX_GPIO_Init+0x2dc>)
 8000b8a:	f001 f9c3 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	21c8      	movs	r1, #200	; 0xc8
 8000b92:	4864      	ldr	r0, [pc, #400]	; (8000d24 <MX_GPIO_Init+0x2e0>)
 8000b94:	f001 f9be 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000b98:	2310      	movs	r3, #16
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ba8:	230e      	movs	r3, #14
 8000baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	485d      	ldr	r0, [pc, #372]	; (8000d28 <MX_GPIO_Init+0x2e4>)
 8000bb4:	f001 f802 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000bb8:	2308      	movs	r3, #8
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4857      	ldr	r0, [pc, #348]	; (8000d28 <MX_GPIO_Init+0x2e4>)
 8000bcc:	f000 fff6 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000be0:	2309      	movs	r3, #9
 8000be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be8:	4619      	mov	r1, r3
 8000bea:	484f      	ldr	r0, [pc, #316]	; (8000d28 <MX_GPIO_Init+0x2e4>)
 8000bec:	f000 ffe6 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000bf0:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c02:	230b      	movs	r3, #11
 8000c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4845      	ldr	r0, [pc, #276]	; (8000d24 <MX_GPIO_Init+0x2e0>)
 8000c0e:	f000 ffd5 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000c12:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c24:	230c      	movs	r3, #12
 8000c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	483e      	ldr	r0, [pc, #248]	; (8000d28 <MX_GPIO_Init+0x2e4>)
 8000c30:	f000 ffc4 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000c34:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c46:	230a      	movs	r3, #10
 8000c48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4836      	ldr	r0, [pc, #216]	; (8000d2c <MX_GPIO_Init+0x2e8>)
 8000c52:	f000 ffb3 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000c56:	2310      	movs	r3, #16
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c62:	2302      	movs	r3, #2
 8000c64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c66:	2302      	movs	r3, #2
 8000c68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c6e:	4619      	mov	r1, r3
 8000c70:	482e      	ldr	r0, [pc, #184]	; (8000d2c <MX_GPIO_Init+0x2e8>)
 8000c72:	f000 ffa3 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000c86:	2308      	movs	r3, #8
 8000c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4820      	ldr	r0, [pc, #128]	; (8000d14 <MX_GPIO_Init+0x2d0>)
 8000c92:	f000 ff93 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000c96:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ca8:	230c      	movs	r3, #12
 8000caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	481f      	ldr	r0, [pc, #124]	; (8000d30 <MX_GPIO_Init+0x2ec>)
 8000cb4:	f000 ff82 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4817      	ldr	r0, [pc, #92]	; (8000d34 <MX_GPIO_Init+0x2f0>)
 8000cd6:	f000 ff71 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000cda:	2360      	movs	r3, #96	; 0x60
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000cea:	230d      	movs	r3, #13
 8000cec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480c      	ldr	r0, [pc, #48]	; (8000d28 <MX_GPIO_Init+0x2e4>)
 8000cf6:	f000 ff61 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000cfa:	2340      	movs	r3, #64	; 0x40
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000d0a:	230a      	movs	r3, #10
 8000d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d0e:	e013      	b.n	8000d38 <MX_GPIO_Init+0x2f4>
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020c00 	.word	0x40020c00
 8000d18:	40022000 	.word	0x40022000
 8000d1c:	40022800 	.word	0x40022800
 8000d20:	40021c00 	.word	0x40021c00
 8000d24:	40021800 	.word	0x40021800
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40020400 	.word	0x40020400
 8000d30:	40020800 	.word	0x40020800
 8000d34:	40020000 	.word	0x40020000
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	48bd      	ldr	r0, [pc, #756]	; (8001034 <MX_GPIO_Init+0x5f0>)
 8000d40:	f000 ff3c 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000d44:	f248 1333 	movw	r3, #33075	; 0x8133
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d56:	230c      	movs	r3, #12
 8000d58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d5e:	4619      	mov	r1, r3
 8000d60:	48b5      	ldr	r0, [pc, #724]	; (8001038 <MX_GPIO_Init+0x5f4>)
 8000d62:	f000 ff2b 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000d66:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d78:	230e      	movs	r3, #14
 8000d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d80:	4619      	mov	r1, r3
 8000d82:	48ae      	ldr	r0, [pc, #696]	; (800103c <MX_GPIO_Init+0x5f8>)
 8000d84:	f000 ff1a 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	48a7      	ldr	r0, [pc, #668]	; (800103c <MX_GPIO_Init+0x5f8>)
 8000d9e:	f000 ff0d 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000da2:	2340      	movs	r3, #64	; 0x40
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000da6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db4:	4619      	mov	r1, r3
 8000db6:	48a2      	ldr	r0, [pc, #648]	; (8001040 <MX_GPIO_Init+0x5fc>)
 8000db8:	f000 ff00 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000dbc:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dce:	230c      	movs	r3, #12
 8000dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4899      	ldr	r0, [pc, #612]	; (8001040 <MX_GPIO_Init+0x5fc>)
 8000dda:	f000 feef 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000dde:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000df0:	230a      	movs	r3, #10
 8000df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4892      	ldr	r0, [pc, #584]	; (8001044 <MX_GPIO_Init+0x600>)
 8000dfc:	f000 fede 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000e00:	23f0      	movs	r3, #240	; 0xf0
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000e10:	230a      	movs	r3, #10
 8000e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e18:	4619      	mov	r1, r3
 8000e1a:	488b      	ldr	r0, [pc, #556]	; (8001048 <MX_GPIO_Init+0x604>)
 8000e1c:	f000 fece 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000e20:	23f7      	movs	r3, #247	; 0xf7
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e30:	230e      	movs	r3, #14
 8000e32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000e34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4884      	ldr	r0, [pc, #528]	; (800104c <MX_GPIO_Init+0x608>)
 8000e3c:	f000 febe 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e52:	2309      	movs	r3, #9
 8000e54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4876      	ldr	r0, [pc, #472]	; (8001038 <MX_GPIO_Init+0x5f4>)
 8000e5e:	f000 fead 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000e74:	230a      	movs	r3, #10
 8000e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000e78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	486e      	ldr	r0, [pc, #440]	; (8001038 <MX_GPIO_Init+0x5f4>)
 8000e80:	f000 fe9c 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000e84:	2320      	movs	r3, #32
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4869      	ldr	r0, [pc, #420]	; (8001040 <MX_GPIO_Init+0x5fc>)
 8000e9c:	f000 fe8e 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000ea0:	2308      	movs	r3, #8
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000eb0:	230d      	movs	r3, #13
 8000eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4861      	ldr	r0, [pc, #388]	; (8001040 <MX_GPIO_Init+0x5fc>)
 8000ebc:	f000 fe7e 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000ec0:	f241 030c 	movw	r3, #4108	; 0x100c
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ed2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	485b      	ldr	r0, [pc, #364]	; (8001048 <MX_GPIO_Init+0x604>)
 8000eda:	f000 fe6f 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000ede:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4857      	ldr	r0, [pc, #348]	; (8001050 <MX_GPIO_Init+0x60c>)
 8000ef4:	f000 fe62 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000ef8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f12:	4619      	mov	r1, r3
 8000f14:	484f      	ldr	r0, [pc, #316]	; (8001054 <MX_GPIO_Init+0x610>)
 8000f16:	f000 fe51 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000f1a:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f2c:	230e      	movs	r3, #14
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f34:	4619      	mov	r1, r3
 8000f36:	4844      	ldr	r0, [pc, #272]	; (8001048 <MX_GPIO_Init+0x604>)
 8000f38:	f000 fe40 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f50:	4619      	mov	r1, r3
 8000f52:	483e      	ldr	r0, [pc, #248]	; (800104c <MX_GPIO_Init+0x608>)
 8000f54:	f000 fe32 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f6a:	230d      	movs	r3, #13
 8000f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f72:	4619      	mov	r1, r3
 8000f74:	4830      	ldr	r0, [pc, #192]	; (8001038 <MX_GPIO_Init+0x5f4>)
 8000f76:	f000 fe21 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f7a:	2310      	movs	r3, #16
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	482c      	ldr	r0, [pc, #176]	; (8001040 <MX_GPIO_Init+0x5fc>)
 8000f8e:	f000 fe15 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000f92:	2304      	movs	r3, #4
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000fa2:	230c      	movs	r3, #12
 8000fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000faa:	4619      	mov	r1, r3
 8000fac:	4824      	ldr	r0, [pc, #144]	; (8001040 <MX_GPIO_Init+0x5fc>)
 8000fae:	f000 fe05 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000fb2:	f248 0304 	movw	r3, #32772	; 0x8004
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4824      	ldr	r0, [pc, #144]	; (8001058 <MX_GPIO_Init+0x614>)
 8000fc8:	f000 fdf8 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000fcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	481c      	ldr	r0, [pc, #112]	; (8001058 <MX_GPIO_Init+0x614>)
 8000fe6:	f000 fde9 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000fea:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ffc:	230d      	movs	r3, #13
 8000ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001000:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001004:	4619      	mov	r1, r3
 8001006:	4814      	ldr	r0, [pc, #80]	; (8001058 <MX_GPIO_Init+0x614>)
 8001008:	f000 fdd8 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800100c:	2301      	movs	r3, #1
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800101c:	2302      	movs	r3, #2
 800101e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001024:	4619      	mov	r1, r3
 8001026:	4808      	ldr	r0, [pc, #32]	; (8001048 <MX_GPIO_Init+0x604>)
 8001028:	f000 fdc8 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800102c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001030:	e014      	b.n	800105c <MX_GPIO_Init+0x618>
 8001032:	bf00      	nop
 8001034:	40020400 	.word	0x40020400
 8001038:	40021800 	.word	0x40021800
 800103c:	40022400 	.word	0x40022400
 8001040:	40020c00 	.word	0x40020c00
 8001044:	40020000 	.word	0x40020000
 8001048:	40022000 	.word	0x40022000
 800104c:	40022800 	.word	0x40022800
 8001050:	40020800 	.word	0x40020800
 8001054:	40021400 	.word	0x40021400
 8001058:	40021c00 	.word	0x40021c00
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800106a:	2301      	movs	r3, #1
 800106c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001072:	4619      	mov	r1, r3
 8001074:	4883      	ldr	r0, [pc, #524]	; (8001284 <MX_GPIO_Init+0x840>)
 8001076:	f000 fda1 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800107a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001080:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001084:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108e:	4619      	mov	r1, r3
 8001090:	487d      	ldr	r0, [pc, #500]	; (8001288 <MX_GPIO_Init+0x844>)
 8001092:	f000 fd93 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001096:	2310      	movs	r3, #16
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010a6:	230a      	movs	r3, #10
 80010a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ae:	4619      	mov	r1, r3
 80010b0:	4876      	ldr	r0, [pc, #472]	; (800128c <MX_GPIO_Init+0x848>)
 80010b2:	f000 fd83 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80010b6:	2328      	movs	r3, #40	; 0x28
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c2:	2303      	movs	r3, #3
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010c6:	230c      	movs	r3, #12
 80010c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ce:	4619      	mov	r1, r3
 80010d0:	486e      	ldr	r0, [pc, #440]	; (800128c <MX_GPIO_Init+0x848>)
 80010d2:	f000 fd73 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80010d6:	23c8      	movs	r3, #200	; 0xc8
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ea:	4619      	mov	r1, r3
 80010ec:	4868      	ldr	r0, [pc, #416]	; (8001290 <MX_GPIO_Init+0x84c>)
 80010ee:	f000 fd65 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80010f2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f8:	2303      	movs	r3, #3
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001100:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001104:	4619      	mov	r1, r3
 8001106:	4863      	ldr	r0, [pc, #396]	; (8001294 <MX_GPIO_Init+0x850>)
 8001108:	f000 fd58 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800110c:	2308      	movs	r3, #8
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800111c:	230c      	movs	r3, #12
 800111e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001124:	4619      	mov	r1, r3
 8001126:	485c      	ldr	r0, [pc, #368]	; (8001298 <MX_GPIO_Init+0x854>)
 8001128:	f000 fd48 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800112c:	2305      	movs	r3, #5
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800113c:	230a      	movs	r3, #10
 800113e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001140:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001144:	4619      	mov	r1, r3
 8001146:	4854      	ldr	r0, [pc, #336]	; (8001298 <MX_GPIO_Init+0x854>)
 8001148:	f000 fd38 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800114c:	2332      	movs	r3, #50	; 0x32
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800115c:	230b      	movs	r3, #11
 800115e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001160:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001164:	4619      	mov	r1, r3
 8001166:	484c      	ldr	r0, [pc, #304]	; (8001298 <MX_GPIO_Init+0x854>)
 8001168:	f000 fd28 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800116c:	2304      	movs	r3, #4
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800117c:	2309      	movs	r3, #9
 800117e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001184:	4619      	mov	r1, r3
 8001186:	4845      	ldr	r0, [pc, #276]	; (800129c <MX_GPIO_Init+0x858>)
 8001188:	f000 fd18 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800118c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800119e:	2309      	movs	r3, #9
 80011a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a6:	4619      	mov	r1, r3
 80011a8:	483d      	ldr	r0, [pc, #244]	; (80012a0 <MX_GPIO_Init+0x85c>)
 80011aa:	f000 fd07 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80011ae:	2304      	movs	r3, #4
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b2:	2300      	movs	r3, #0
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011be:	4619      	mov	r1, r3
 80011c0:	4833      	ldr	r0, [pc, #204]	; (8001290 <MX_GPIO_Init+0x84c>)
 80011c2:	f000 fcfb 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011c6:	2386      	movs	r3, #134	; 0x86
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011d6:	230b      	movs	r3, #11
 80011d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011de:	4619      	mov	r1, r3
 80011e0:	4828      	ldr	r0, [pc, #160]	; (8001284 <MX_GPIO_Init+0x840>)
 80011e2:	f000 fceb 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80011e6:	2301      	movs	r3, #1
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ea:	2303      	movs	r3, #3
 80011ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f6:	4619      	mov	r1, r3
 80011f8:	4822      	ldr	r0, [pc, #136]	; (8001284 <MX_GPIO_Init+0x840>)
 80011fa:	f000 fcdf 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80011fe:	2350      	movs	r3, #80	; 0x50
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800120e:	230d      	movs	r3, #13
 8001210:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001216:	4619      	mov	r1, r3
 8001218:	481a      	ldr	r0, [pc, #104]	; (8001284 <MX_GPIO_Init+0x840>)
 800121a:	f000 fccf 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800121e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001224:	2312      	movs	r3, #18
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001230:	2304      	movs	r3, #4
 8001232:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001234:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001238:	4619      	mov	r1, r3
 800123a:	4814      	ldr	r0, [pc, #80]	; (800128c <MX_GPIO_Init+0x848>)
 800123c:	f000 fcbe 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001240:	2328      	movs	r3, #40	; 0x28
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001250:	230a      	movs	r3, #10
 8001252:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001258:	4619      	mov	r1, r3
 800125a:	480a      	ldr	r0, [pc, #40]	; (8001284 <MX_GPIO_Init+0x840>)
 800125c:	f000 fcae 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001260:	2340      	movs	r3, #64	; 0x40
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001270:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001274:	4619      	mov	r1, r3
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_GPIO_Init+0x848>)
 8001278:	f000 fca0 	bl	8001bbc <HAL_GPIO_Init>

}
 800127c:	bf00      	nop
 800127e:	3740      	adds	r7, #64	; 0x40
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40020000 	.word	0x40020000
 8001288:	40022000 	.word	0x40022000
 800128c:	40021c00 	.word	0x40021c00
 8001290:	40021800 	.word	0x40021800
 8001294:	40021400 	.word	0x40021400
 8001298:	40020800 	.word	0x40020800
 800129c:	40020400 	.word	0x40020400
 80012a0:	40020c00 	.word	0x40020c00

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ac:	e7fe      	b.n	80012ac <Error_Handler+0x8>

080012ae <mcp23017_init>:
#define REGISTER_OLATB		0x15

#define I2C_TIMEOUT		10

void mcp23017_init(MCP23017_HandleTypeDef *hdev, I2C_HandleTypeDef *hi2c, uint16_t addr)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b085      	sub	sp, #20
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	60f8      	str	r0, [r7, #12]
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	4613      	mov	r3, r2
 80012ba:	80fb      	strh	r3, [r7, #6]
	hdev->hi2c = hi2c;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	601a      	str	r2, [r3, #0]
	hdev->addr = addr << 1;
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	809a      	strh	r2, [r3, #4]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <mcp23017_write>:
{
	return HAL_I2C_Mem_Read(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
}

HAL_StatusTypeDef mcp23017_write(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af04      	add	r7, sp, #16
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	460b      	mov	r3, r1
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	817b      	strh	r3, [r7, #10]
	return HAL_I2C_Mem_Write(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	8899      	ldrh	r1, [r3, #4]
 80012ee:	897a      	ldrh	r2, [r7, #10]
 80012f0:	230a      	movs	r3, #10
 80012f2:	9302      	str	r3, [sp, #8]
 80012f4:	2301      	movs	r3, #1
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2301      	movs	r3, #1
 80012fe:	f000 feb3 	bl	8002068 <HAL_I2C_Mem_Write>
 8001302:	4603      	mov	r3, r0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <mcp23017_iodir>:

HAL_StatusTypeDef mcp23017_iodir(MCP23017_HandleTypeDef *hdev, uint8_t port, uint8_t iodir)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	70fb      	strb	r3, [r7, #3]
 8001318:	4613      	mov	r3, r2
 800131a:	70bb      	strb	r3, [r7, #2]
	uint8_t data[1] = {iodir};
 800131c:	78bb      	ldrb	r3, [r7, #2]
 800131e:	733b      	strb	r3, [r7, #12]
	return mcp23017_write(hdev, REGISTER_IODIRA|port, data);
 8001320:	78fb      	ldrb	r3, [r7, #3]
 8001322:	b29b      	uxth	r3, r3
 8001324:	f107 020c 	add.w	r2, r7, #12
 8001328:	4619      	mov	r1, r3
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ffd4 	bl	80012d8 <mcp23017_write>
 8001330:	4603      	mov	r3, r0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <mcp23017_write_gpio>:
		hdev->gpio[port] = data[0];
	return status;
}

HAL_StatusTypeDef mcp23017_write_gpio(MCP23017_HandleTypeDef *hdev, uint8_t port)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b084      	sub	sp, #16
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	460b      	mov	r3, r1
 8001344:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1] = {hdev->gpio[port]};
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	4413      	add	r3, r2
 800134c:	799b      	ldrb	r3, [r3, #6]
 800134e:	733b      	strb	r3, [r7, #12]
	return mcp23017_write(hdev, REGISTER_GPIOA|port, data);
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	f043 0312 	orr.w	r3, r3, #18
 8001356:	b2db      	uxtb	r3, r3
 8001358:	b29b      	uxth	r3, r3
 800135a:	f107 020c 	add.w	r2, r7, #12
 800135e:	4619      	mov	r1, r3
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ffb9 	bl	80012d8 <mcp23017_write>
 8001366:	4603      	mov	r3, r0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <HAL_MspInit+0x44>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <HAL_MspInit+0x44>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_MspInit+0x44>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_MspInit+0x44>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <HAL_MspInit+0x44>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_MspInit+0x44>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800

080013b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b0aa      	sub	sp, #168	; 0xa8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	2284      	movs	r2, #132	; 0x84
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f004 fae5 	bl	80059a8 <memset>
  if(hi2c->Instance==I2C1)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a22      	ldr	r2, [pc, #136]	; (800146c <HAL_I2C_MspInit+0xb4>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d13c      	bne.n	8001462 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f2:	f107 0310 	add.w	r3, r7, #16
 80013f6:	4618      	mov	r0, r3
 80013f8:	f001 ff0e 	bl	8003218 <HAL_RCCEx_PeriphCLKConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001402:	f7ff ff4f 	bl	80012a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <HAL_I2C_MspInit+0xb8>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a19      	ldr	r2, [pc, #100]	; (8001470 <HAL_I2C_MspInit+0xb8>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_I2C_MspInit+0xb8>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800141e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001422:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001426:	2312      	movs	r3, #18
 8001428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001438:	2304      	movs	r3, #4
 800143a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001442:	4619      	mov	r1, r3
 8001444:	480b      	ldr	r0, [pc, #44]	; (8001474 <HAL_I2C_MspInit+0xbc>)
 8001446:	f000 fbb9 	bl	8001bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_I2C_MspInit+0xb8>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a08      	ldr	r2, [pc, #32]	; (8001470 <HAL_I2C_MspInit+0xb8>)
 8001450:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_I2C_MspInit+0xb8>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	37a8      	adds	r7, #168	; 0xa8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40005400 	.word	0x40005400
 8001470:	40023800 	.word	0x40023800
 8001474:	40020400 	.word	0x40020400

08001478 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a25      	ldr	r2, [pc, #148]	; (800152c <HAL_SPI_MspInit+0xb4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d144      	bne.n	8001524 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800149a:	4b25      	ldr	r3, [pc, #148]	; (8001530 <HAL_SPI_MspInit+0xb8>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a24      	ldr	r2, [pc, #144]	; (8001530 <HAL_SPI_MspInit+0xb8>)
 80014a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <HAL_SPI_MspInit+0xb8>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <HAL_SPI_MspInit+0xb8>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a1e      	ldr	r2, [pc, #120]	; (8001530 <HAL_SPI_MspInit+0xb8>)
 80014b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <HAL_SPI_MspInit+0xb8>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <HAL_SPI_MspInit+0xb8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a18      	ldr	r2, [pc, #96]	; (8001530 <HAL_SPI_MspInit+0xb8>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <HAL_SPI_MspInit+0xb8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80014e2:	2302      	movs	r3, #2
 80014e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014f2:	2305      	movs	r3, #5
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	480d      	ldr	r0, [pc, #52]	; (8001534 <HAL_SPI_MspInit+0xbc>)
 80014fe:	f000 fb5d 	bl	8001bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001502:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001514:	2305      	movs	r3, #5
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	4806      	ldr	r0, [pc, #24]	; (8001538 <HAL_SPI_MspInit+0xc0>)
 8001520:	f000 fb4c 	bl	8001bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001524:	bf00      	nop
 8001526:	3728      	adds	r7, #40	; 0x28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40003800 	.word	0x40003800
 8001530:	40023800 	.word	0x40023800
 8001534:	40022000 	.word	0x40022000
 8001538:	40020400 	.word	0x40020400

0800153c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0d      	ldr	r2, [pc, #52]	; (8001580 <HAL_TIM_Base_MspInit+0x44>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d113      	bne.n	8001576 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HAL_TIM_Base_MspInit+0x48>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a0c      	ldr	r2, [pc, #48]	; (8001584 <HAL_TIM_Base_MspInit+0x48>)
 8001554:	f043 0310 	orr.w	r3, r3, #16
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_TIM_Base_MspInit+0x48>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	2036      	movs	r0, #54	; 0x36
 800156c:	f000 faef 	bl	8001b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001570:	2036      	movs	r0, #54	; 0x36
 8001572:	f000 fb08 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40001000 	.word	0x40001000
 8001584:	40023800 	.word	0x40023800

08001588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b0ae      	sub	sp, #184	; 0xb8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a0:	f107 0320 	add.w	r3, r7, #32
 80015a4:	2284      	movs	r2, #132	; 0x84
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f004 f9fd 	bl	80059a8 <memset>
  if(huart->Instance==USART1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a53      	ldr	r2, [pc, #332]	; (8001700 <HAL_UART_MspInit+0x178>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d15d      	bne.n	8001674 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015b8:	2340      	movs	r3, #64	; 0x40
 80015ba:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015bc:	2300      	movs	r3, #0
 80015be:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c0:	f107 0320 	add.w	r3, r7, #32
 80015c4:	4618      	mov	r0, r3
 80015c6:	f001 fe27 	bl	8003218 <HAL_RCCEx_PeriphCLKConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015d0:	f7ff fe68 	bl	80012a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015d4:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <HAL_UART_MspInit+0x17c>)
 80015d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d8:	4a4a      	ldr	r2, [pc, #296]	; (8001704 <HAL_UART_MspInit+0x17c>)
 80015da:	f043 0310 	orr.w	r3, r3, #16
 80015de:	6453      	str	r3, [r2, #68]	; 0x44
 80015e0:	4b48      	ldr	r3, [pc, #288]	; (8001704 <HAL_UART_MspInit+0x17c>)
 80015e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e4:	f003 0310 	and.w	r3, r3, #16
 80015e8:	61fb      	str	r3, [r7, #28]
 80015ea:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ec:	4b45      	ldr	r3, [pc, #276]	; (8001704 <HAL_UART_MspInit+0x17c>)
 80015ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f0:	4a44      	ldr	r2, [pc, #272]	; (8001704 <HAL_UART_MspInit+0x17c>)
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	6313      	str	r3, [r2, #48]	; 0x30
 80015f8:	4b42      	ldr	r3, [pc, #264]	; (8001704 <HAL_UART_MspInit+0x17c>)
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001604:	4b3f      	ldr	r3, [pc, #252]	; (8001704 <HAL_UART_MspInit+0x17c>)
 8001606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001608:	4a3e      	ldr	r2, [pc, #248]	; (8001704 <HAL_UART_MspInit+0x17c>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6313      	str	r3, [r2, #48]	; 0x30
 8001610:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <HAL_UART_MspInit+0x17c>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001634:	2307      	movs	r3, #7
 8001636:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800163a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800163e:	4619      	mov	r1, r3
 8001640:	4831      	ldr	r0, [pc, #196]	; (8001708 <HAL_UART_MspInit+0x180>)
 8001642:	f000 fabb 	bl	8001bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800164a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001660:	2307      	movs	r3, #7
 8001662:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001666:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800166a:	4619      	mov	r1, r3
 800166c:	4827      	ldr	r0, [pc, #156]	; (800170c <HAL_UART_MspInit+0x184>)
 800166e:	f000 faa5 	bl	8001bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001672:	e040      	b.n	80016f6 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a25      	ldr	r2, [pc, #148]	; (8001710 <HAL_UART_MspInit+0x188>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d13b      	bne.n	80016f6 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800167e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001682:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001684:	2300      	movs	r3, #0
 8001686:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001688:	f107 0320 	add.w	r3, r7, #32
 800168c:	4618      	mov	r0, r3
 800168e:	f001 fdc3 	bl	8003218 <HAL_RCCEx_PeriphCLKConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_UART_MspInit+0x114>
      Error_Handler();
 8001698:	f7ff fe04 	bl	80012a4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_UART_MspInit+0x17c>)
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	4a18      	ldr	r2, [pc, #96]	; (8001704 <HAL_UART_MspInit+0x17c>)
 80016a2:	f043 0320 	orr.w	r3, r3, #32
 80016a6:	6453      	str	r3, [r2, #68]	; 0x44
 80016a8:	4b16      	ldr	r3, [pc, #88]	; (8001704 <HAL_UART_MspInit+0x17c>)
 80016aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ac:	f003 0320 	and.w	r3, r3, #32
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <HAL_UART_MspInit+0x17c>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	4a12      	ldr	r2, [pc, #72]	; (8001704 <HAL_UART_MspInit+0x17c>)
 80016ba:	f043 0304 	orr.w	r3, r3, #4
 80016be:	6313      	str	r3, [r2, #48]	; 0x30
 80016c0:	4b10      	ldr	r3, [pc, #64]	; (8001704 <HAL_UART_MspInit+0x17c>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80016cc:	23c0      	movs	r3, #192	; 0xc0
 80016ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016de:	2303      	movs	r3, #3
 80016e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80016e4:	2308      	movs	r3, #8
 80016e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016ee:	4619      	mov	r1, r3
 80016f0:	4808      	ldr	r0, [pc, #32]	; (8001714 <HAL_UART_MspInit+0x18c>)
 80016f2:	f000 fa63 	bl	8001bbc <HAL_GPIO_Init>
}
 80016f6:	bf00      	nop
 80016f8:	37b8      	adds	r7, #184	; 0xb8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40011000 	.word	0x40011000
 8001704:	40023800 	.word	0x40023800
 8001708:	40020400 	.word	0x40020400
 800170c:	40020000 	.word	0x40020000
 8001710:	40011400 	.word	0x40011400
 8001714:	40020800 	.word	0x40020800

08001718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800171c:	e7fe      	b.n	800171c <NMI_Handler+0x4>

0800171e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <MemManage_Handler+0x4>

0800172a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <UsageFault_Handler+0x4>

08001736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001764:	f000 f8f8 	bl	8001958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
	mcp23017_write_gpio(&hmcp, MCP23017_PORTA);
	mcp23017_write_gpio(&hmcp, MCP23017_PORTB);
	*/


	for (int k=0;k<16;k++){
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	e02a      	b.n	80017ce <TIM6_DAC_IRQHandler+0x62>


		hmcp.gpio[MCP23017_PORTB] = MCP23017_B[k];
 8001778:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <TIM6_DAC_IRQHandler+0x7c>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	781a      	ldrb	r2, [r3, #0]
 8001780:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <TIM6_DAC_IRQHandler+0x80>)
 8001782:	71da      	strb	r2, [r3, #7]
		hmcp.gpio[MCP23017_PORTA] = MCP23017_A[k];
 8001784:	4a1a      	ldr	r2, [pc, #104]	; (80017f0 <TIM6_DAC_IRQHandler+0x84>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	781a      	ldrb	r2, [r3, #0]
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <TIM6_DAC_IRQHandler+0x80>)
 800178e:	719a      	strb	r2, [r3, #6]

		mcp23017_write_gpio(&hmcp, MCP23017_PORTA);
 8001790:	2100      	movs	r1, #0
 8001792:	4816      	ldr	r0, [pc, #88]	; (80017ec <TIM6_DAC_IRQHandler+0x80>)
 8001794:	f7ff fdd1 	bl	800133a <mcp23017_write_gpio>
		mcp23017_write_gpio(&hmcp, MCP23017_PORTB);
 8001798:	2101      	movs	r1, #1
 800179a:	4814      	ldr	r0, [pc, #80]	; (80017ec <TIM6_DAC_IRQHandler+0x80>)
 800179c:	f7ff fdcd 	bl	800133a <mcp23017_write_gpio>


		for (int p=0;p<16;p++){
 80017a0:	2300      	movs	r3, #0
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	e00d      	b.n	80017c2 <TIM6_DAC_IRQHandler+0x56>
			spi_buf[16*k+p] = read_ch_MCP3008(p);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	011a      	lsls	r2, r3, #4
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	18d4      	adds	r4, r2, r3
 80017ae:	6838      	ldr	r0, [r7, #0]
 80017b0:	f7fe ff00 	bl	80005b4 <read_ch_MCP3008>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <TIM6_DAC_IRQHandler+0x88>)
 80017ba:	551a      	strb	r2, [r3, r4]
		for (int p=0;p<16;p++){
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	603b      	str	r3, [r7, #0]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	2b0f      	cmp	r3, #15
 80017c6:	ddee      	ble.n	80017a6 <TIM6_DAC_IRQHandler+0x3a>
	for (int k=0;k<16;k++){
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3301      	adds	r3, #1
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b0f      	cmp	r3, #15
 80017d2:	ddd1      	ble.n	8001778 <TIM6_DAC_IRQHandler+0xc>
		//print_char_uart_1("\r\n");
	}


	//print_char_uart_1("\r\n");
	send_matrix_uart_1();
 80017d4:	f7fe ff3c 	bl	8000650 <send_matrix_uart_1>




  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017d8:	4807      	ldr	r0, [pc, #28]	; (80017f8 <TIM6_DAC_IRQHandler+0x8c>)
 80017da:	f003 f93d 	bl	8004a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd90      	pop	{r4, r7, pc}
 80017e6:	bf00      	nop
 80017e8:	080062d8 	.word	0x080062d8
 80017ec:	20000290 	.word	0x20000290
 80017f0:	080062c8 	.word	0x080062c8
 80017f4:	20000298 	.word	0x20000298
 80017f8:	2000013c 	.word	0x2000013c

080017fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001804:	4a14      	ldr	r2, [pc, #80]	; (8001858 <_sbrk+0x5c>)
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <_sbrk+0x60>)
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <_sbrk+0x64>)
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <_sbrk+0x68>)
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	429a      	cmp	r2, r3
 800182a:	d207      	bcs.n	800183c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800182c:	f004 f892 	bl	8005954 <__errno>
 8001830:	4603      	mov	r3, r0
 8001832:	220c      	movs	r2, #12
 8001834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	e009      	b.n	8001850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	4a05      	ldr	r2, [pc, #20]	; (8001860 <_sbrk+0x64>)
 800184c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20050000 	.word	0x20050000
 800185c:	00000400 	.word	0x00000400
 8001860:	20000398 	.word	0x20000398
 8001864:	200003b0 	.word	0x200003b0

08001868 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <SystemInit+0x20>)
 800186e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <SystemInit+0x20>)
 8001874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800188c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001890:	480d      	ldr	r0, [pc, #52]	; (80018c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001892:	490e      	ldr	r1, [pc, #56]	; (80018cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001894:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001898:	e002      	b.n	80018a0 <LoopCopyDataInit>

0800189a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800189c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189e:	3304      	adds	r3, #4

080018a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a4:	d3f9      	bcc.n	800189a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a6:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018a8:	4c0b      	ldr	r4, [pc, #44]	; (80018d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ac:	e001      	b.n	80018b2 <LoopFillZerobss>

080018ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b0:	3204      	adds	r2, #4

080018b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b4:	d3fb      	bcc.n	80018ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018b6:	f7ff ffd7 	bl	8001868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ba:	f004 f851 	bl	8005960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018be:	f7fe ff09 	bl	80006d4 <main>
  bx  lr    
 80018c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018c4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80018c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018cc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018d0:	08006344 	.word	0x08006344
  ldr r2, =_sbss
 80018d4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018d8:	200003b0 	.word	0x200003b0

080018dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018dc:	e7fe      	b.n	80018dc <ADC_IRQHandler>

080018de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e2:	2003      	movs	r0, #3
 80018e4:	f000 f928 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e8:	2000      	movs	r0, #0
 80018ea:	f000 f805 	bl	80018f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ee:	f7ff fd3f 	bl	8001370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_InitTick+0x54>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_InitTick+0x58>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f943 	bl	8001ba2 <HAL_SYSTICK_Config>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e00e      	b.n	8001944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d80a      	bhi.n	8001942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800192c:	2200      	movs	r2, #0
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f000 f90b 	bl	8001b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <HAL_InitTick+0x5c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	e000      	b.n	8001944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000000 	.word	0x20000000
 8001950:	20000008 	.word	0x20000008
 8001954:	20000004 	.word	0x20000004

08001958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_IncTick+0x20>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_IncTick+0x24>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4413      	add	r3, r2
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_IncTick+0x24>)
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000008 	.word	0x20000008
 800197c:	2000039c 	.word	0x2000039c

08001980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return uwTick;
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <HAL_GetTick+0x14>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	2000039c 	.word	0x2000039c

08001998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <__NVIC_SetPriorityGrouping+0x40>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c6:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <__NVIC_SetPriorityGrouping+0x40>)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	60d3      	str	r3, [r2, #12]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00
 80019dc:	05fa0000 	.word	0x05fa0000

080019e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <__NVIC_GetPriorityGrouping+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f003 0307 	and.w	r3, r3, #7
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	db0b      	blt.n	8001a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	f003 021f 	and.w	r2, r3, #31
 8001a14:	4907      	ldr	r1, [pc, #28]	; (8001a34 <__NVIC_EnableIRQ+0x38>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	; (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	; (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b04:	d301      	bcc.n	8001b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00f      	b.n	8001b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <SysTick_Config+0x40>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b12:	210f      	movs	r1, #15
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f7ff ff8e 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <SysTick_Config+0x40>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b22:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <SysTick_Config+0x40>)
 8001b24:	2207      	movs	r2, #7
 8001b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	e000e010 	.word	0xe000e010

08001b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff29 	bl	8001998 <__NVIC_SetPriorityGrouping>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b60:	f7ff ff3e 	bl	80019e0 <__NVIC_GetPriorityGrouping>
 8001b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7ff ff8e 	bl	8001a8c <NVIC_EncodePriority>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff5d 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff31 	bl	80019fc <__NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffa2 	bl	8001af4 <SysTick_Config>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
 8001bda:	e175      	b.n	8001ec8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	f040 8164 	bne.w	8001ec2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d005      	beq.n	8001c12 <HAL_GPIO_Init+0x56>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d130      	bne.n	8001c74 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c48:	2201      	movs	r2, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	091b      	lsrs	r3, r3, #4
 8001c5e:	f003 0201 	and.w	r2, r3, #1
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d017      	beq.n	8001cb0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d123      	bne.n	8001d04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	08da      	lsrs	r2, r3, #3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3208      	adds	r2, #8
 8001cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	08da      	lsrs	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3208      	adds	r2, #8
 8001cfe:	69b9      	ldr	r1, [r7, #24]
 8001d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0203 	and.w	r2, r3, #3
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 80be 	beq.w	8001ec2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d46:	4b66      	ldr	r3, [pc, #408]	; (8001ee0 <HAL_GPIO_Init+0x324>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4a65      	ldr	r2, [pc, #404]	; (8001ee0 <HAL_GPIO_Init+0x324>)
 8001d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
 8001d52:	4b63      	ldr	r3, [pc, #396]	; (8001ee0 <HAL_GPIO_Init+0x324>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d5e:	4a61      	ldr	r2, [pc, #388]	; (8001ee4 <HAL_GPIO_Init+0x328>)
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	3302      	adds	r3, #2
 8001d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	220f      	movs	r2, #15
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a58      	ldr	r2, [pc, #352]	; (8001ee8 <HAL_GPIO_Init+0x32c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d037      	beq.n	8001dfa <HAL_GPIO_Init+0x23e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a57      	ldr	r2, [pc, #348]	; (8001eec <HAL_GPIO_Init+0x330>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d031      	beq.n	8001df6 <HAL_GPIO_Init+0x23a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a56      	ldr	r2, [pc, #344]	; (8001ef0 <HAL_GPIO_Init+0x334>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d02b      	beq.n	8001df2 <HAL_GPIO_Init+0x236>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a55      	ldr	r2, [pc, #340]	; (8001ef4 <HAL_GPIO_Init+0x338>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d025      	beq.n	8001dee <HAL_GPIO_Init+0x232>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a54      	ldr	r2, [pc, #336]	; (8001ef8 <HAL_GPIO_Init+0x33c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d01f      	beq.n	8001dea <HAL_GPIO_Init+0x22e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a53      	ldr	r2, [pc, #332]	; (8001efc <HAL_GPIO_Init+0x340>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d019      	beq.n	8001de6 <HAL_GPIO_Init+0x22a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a52      	ldr	r2, [pc, #328]	; (8001f00 <HAL_GPIO_Init+0x344>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d013      	beq.n	8001de2 <HAL_GPIO_Init+0x226>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a51      	ldr	r2, [pc, #324]	; (8001f04 <HAL_GPIO_Init+0x348>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00d      	beq.n	8001dde <HAL_GPIO_Init+0x222>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a50      	ldr	r2, [pc, #320]	; (8001f08 <HAL_GPIO_Init+0x34c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d007      	beq.n	8001dda <HAL_GPIO_Init+0x21e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4f      	ldr	r2, [pc, #316]	; (8001f0c <HAL_GPIO_Init+0x350>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d101      	bne.n	8001dd6 <HAL_GPIO_Init+0x21a>
 8001dd2:	2309      	movs	r3, #9
 8001dd4:	e012      	b.n	8001dfc <HAL_GPIO_Init+0x240>
 8001dd6:	230a      	movs	r3, #10
 8001dd8:	e010      	b.n	8001dfc <HAL_GPIO_Init+0x240>
 8001dda:	2308      	movs	r3, #8
 8001ddc:	e00e      	b.n	8001dfc <HAL_GPIO_Init+0x240>
 8001dde:	2307      	movs	r3, #7
 8001de0:	e00c      	b.n	8001dfc <HAL_GPIO_Init+0x240>
 8001de2:	2306      	movs	r3, #6
 8001de4:	e00a      	b.n	8001dfc <HAL_GPIO_Init+0x240>
 8001de6:	2305      	movs	r3, #5
 8001de8:	e008      	b.n	8001dfc <HAL_GPIO_Init+0x240>
 8001dea:	2304      	movs	r3, #4
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x240>
 8001dee:	2303      	movs	r3, #3
 8001df0:	e004      	b.n	8001dfc <HAL_GPIO_Init+0x240>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e002      	b.n	8001dfc <HAL_GPIO_Init+0x240>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_GPIO_Init+0x240>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	f002 0203 	and.w	r2, r2, #3
 8001e02:	0092      	lsls	r2, r2, #2
 8001e04:	4093      	lsls	r3, r2
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e0c:	4935      	ldr	r1, [pc, #212]	; (8001ee4 <HAL_GPIO_Init+0x328>)
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	089b      	lsrs	r3, r3, #2
 8001e12:	3302      	adds	r3, #2
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e1a:	4b3d      	ldr	r3, [pc, #244]	; (8001f10 <HAL_GPIO_Init+0x354>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e3e:	4a34      	ldr	r2, [pc, #208]	; (8001f10 <HAL_GPIO_Init+0x354>)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e44:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <HAL_GPIO_Init+0x354>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e68:	4a29      	ldr	r2, [pc, #164]	; (8001f10 <HAL_GPIO_Init+0x354>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e6e:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <HAL_GPIO_Init+0x354>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e92:	4a1f      	ldr	r2, [pc, #124]	; (8001f10 <HAL_GPIO_Init+0x354>)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_GPIO_Init+0x354>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ebc:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <HAL_GPIO_Init+0x354>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	2b0f      	cmp	r3, #15
 8001ecc:	f67f ae86 	bls.w	8001bdc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	3724      	adds	r7, #36	; 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40013800 	.word	0x40013800
 8001ee8:	40020000 	.word	0x40020000
 8001eec:	40020400 	.word	0x40020400
 8001ef0:	40020800 	.word	0x40020800
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40021400 	.word	0x40021400
 8001f00:	40021800 	.word	0x40021800
 8001f04:	40021c00 	.word	0x40021c00
 8001f08:	40022000 	.word	0x40022000
 8001f0c:	40022400 	.word	0x40022400
 8001f10:	40013c00 	.word	0x40013c00

08001f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
 8001f20:	4613      	mov	r3, r2
 8001f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f24:	787b      	ldrb	r3, [r7, #1]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f2a:	887a      	ldrh	r2, [r7, #2]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f30:	e003      	b.n	8001f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f32:	887b      	ldrh	r3, [r7, #2]
 8001f34:	041a      	lsls	r2, r3, #16
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	619a      	str	r2, [r3, #24]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e07f      	b.n	800205a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff fa22 	bl	80013b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2224      	movs	r2, #36	; 0x24
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fa8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d107      	bne.n	8001fc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	e006      	b.n	8001fd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d104      	bne.n	8001fe2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fe0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6859      	ldr	r1, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <HAL_I2C_Init+0x11c>)
 8001fee:	430b      	orrs	r3, r1
 8001ff0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002000:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69d9      	ldr	r1, [r3, #28]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a1a      	ldr	r2, [r3, #32]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2220      	movs	r2, #32
 8002046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	02008000 	.word	0x02008000

08002068 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af02      	add	r7, sp, #8
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	4608      	mov	r0, r1
 8002072:	4611      	mov	r1, r2
 8002074:	461a      	mov	r2, r3
 8002076:	4603      	mov	r3, r0
 8002078:	817b      	strh	r3, [r7, #10]
 800207a:	460b      	mov	r3, r1
 800207c:	813b      	strh	r3, [r7, #8]
 800207e:	4613      	mov	r3, r2
 8002080:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b20      	cmp	r3, #32
 800208c:	f040 80f9 	bne.w	8002282 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <HAL_I2C_Mem_Write+0x34>
 8002096:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002098:	2b00      	cmp	r3, #0
 800209a:	d105      	bne.n	80020a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0ed      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_I2C_Mem_Write+0x4e>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e0e6      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020be:	f7ff fc5f 	bl	8001980 <HAL_GetTick>
 80020c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	2319      	movs	r3, #25
 80020ca:	2201      	movs	r2, #1
 80020cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 f955 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0d1      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2221      	movs	r2, #33	; 0x21
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2240      	movs	r2, #64	; 0x40
 80020ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a3a      	ldr	r2, [r7, #32]
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002100:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002108:	88f8      	ldrh	r0, [r7, #6]
 800210a:	893a      	ldrh	r2, [r7, #8]
 800210c:	8979      	ldrh	r1, [r7, #10]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	4603      	mov	r3, r0
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 f8b9 	bl	8002290 <I2C_RequestMemoryWrite>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0a9      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002134:	b29b      	uxth	r3, r3
 8002136:	2bff      	cmp	r3, #255	; 0xff
 8002138:	d90e      	bls.n	8002158 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	22ff      	movs	r2, #255	; 0xff
 800213e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002144:	b2da      	uxtb	r2, r3
 8002146:	8979      	ldrh	r1, [r7, #10]
 8002148:	2300      	movs	r3, #0
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fabd 	bl	80026d0 <I2C_TransferConfig>
 8002156:	e00f      	b.n	8002178 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002166:	b2da      	uxtb	r2, r3
 8002168:	8979      	ldrh	r1, [r7, #10]
 800216a:	2300      	movs	r3, #0
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 faac 	bl	80026d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 f93f 	bl	8002400 <I2C_WaitOnTXISFlagUntilTimeout>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e07b      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	781a      	ldrb	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	3b01      	subs	r3, #1
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d034      	beq.n	8002230 <HAL_I2C_Mem_Write+0x1c8>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d130      	bne.n	8002230 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d4:	2200      	movs	r2, #0
 80021d6:	2180      	movs	r1, #128	; 0x80
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 f8d1 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e04d      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	2bff      	cmp	r3, #255	; 0xff
 80021f0:	d90e      	bls.n	8002210 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	22ff      	movs	r2, #255	; 0xff
 80021f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	8979      	ldrh	r1, [r7, #10]
 8002200:	2300      	movs	r3, #0
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 fa61 	bl	80026d0 <I2C_TransferConfig>
 800220e:	e00f      	b.n	8002230 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221e:	b2da      	uxtb	r2, r3
 8002220:	8979      	ldrh	r1, [r7, #10]
 8002222:	2300      	movs	r3, #0
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 fa50 	bl	80026d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29b      	uxth	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d19e      	bne.n	8002178 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f91e 	bl	8002480 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e01a      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2220      	movs	r2, #32
 8002254:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6859      	ldr	r1, [r3, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <HAL_I2C_Mem_Write+0x224>)
 8002262:	400b      	ands	r3, r1
 8002264:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e000      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002282:	2302      	movs	r3, #2
  }
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	fe00e800 	.word	0xfe00e800

08002290 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af02      	add	r7, sp, #8
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	4608      	mov	r0, r1
 800229a:	4611      	mov	r1, r2
 800229c:	461a      	mov	r2, r3
 800229e:	4603      	mov	r3, r0
 80022a0:	817b      	strh	r3, [r7, #10]
 80022a2:	460b      	mov	r3, r1
 80022a4:	813b      	strh	r3, [r7, #8]
 80022a6:	4613      	mov	r3, r2
 80022a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	8979      	ldrh	r1, [r7, #10]
 80022b0:	4b20      	ldr	r3, [pc, #128]	; (8002334 <I2C_RequestMemoryWrite+0xa4>)
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 fa09 	bl	80026d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	69b9      	ldr	r1, [r7, #24]
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f89c 	bl	8002400 <I2C_WaitOnTXISFlagUntilTimeout>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e02c      	b.n	800232c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d105      	bne.n	80022e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022d8:	893b      	ldrh	r3, [r7, #8]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28
 80022e2:	e015      	b.n	8002310 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022e4:	893b      	ldrh	r3, [r7, #8]
 80022e6:	0a1b      	lsrs	r3, r3, #8
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	69b9      	ldr	r1, [r7, #24]
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f882 	bl	8002400 <I2C_WaitOnTXISFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e012      	b.n	800232c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002306:	893b      	ldrh	r3, [r7, #8]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	2200      	movs	r2, #0
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f830 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	80002000 	.word	0x80002000

08002338 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b02      	cmp	r3, #2
 800234c:	d103      	bne.n	8002356 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2200      	movs	r2, #0
 8002354:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d007      	beq.n	8002374 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	619a      	str	r2, [r3, #24]
  }
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002390:	e022      	b.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d01e      	beq.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239a:	f7ff faf1 	bl	8001980 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d302      	bcc.n	80023b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d113      	bne.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b4:	f043 0220 	orr.w	r2, r3, #32
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e00f      	b.n	80023f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	4013      	ands	r3, r2
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d0cd      	beq.n	8002392 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800240c:	e02c      	b.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f870 	bl	80024f8 <I2C_IsErrorOccurred>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e02a      	b.n	8002478 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d01e      	beq.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242a:	f7ff faa9 	bl	8001980 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d113      	bne.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002444:	f043 0220 	orr.w	r2, r3, #32
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e007      	b.n	8002478 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b02      	cmp	r3, #2
 8002474:	d1cb      	bne.n	800240e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800248c:	e028      	b.n	80024e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f830 	bl	80024f8 <I2C_IsErrorOccurred>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e026      	b.n	80024f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a2:	f7ff fa6d 	bl	8001980 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d302      	bcc.n	80024b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d113      	bne.n	80024e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	f043 0220 	orr.w	r2, r3, #32
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e007      	b.n	80024f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d1cf      	bne.n	800248e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	d075      	beq.n	8002610 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2210      	movs	r2, #16
 800252a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800252c:	e056      	b.n	80025dc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d052      	beq.n	80025dc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002536:	f7ff fa23 	bl	8001980 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	429a      	cmp	r2, r3
 8002544:	d302      	bcc.n	800254c <I2C_IsErrorOccurred+0x54>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d147      	bne.n	80025dc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002556:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800255e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800256a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800256e:	d12e      	bne.n	80025ce <I2C_IsErrorOccurred+0xd6>
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002576:	d02a      	beq.n	80025ce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002578:	7cfb      	ldrb	r3, [r7, #19]
 800257a:	2b20      	cmp	r3, #32
 800257c:	d027      	beq.n	80025ce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800258c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800258e:	f7ff f9f7 	bl	8001980 <HAL_GetTick>
 8002592:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002594:	e01b      	b.n	80025ce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002596:	f7ff f9f3 	bl	8001980 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b19      	cmp	r3, #25
 80025a2:	d914      	bls.n	80025ce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	f043 0220 	orr.w	r2, r3, #32
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b20      	cmp	r3, #32
 80025da:	d1dc      	bne.n	8002596 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	d003      	beq.n	80025f2 <I2C_IsErrorOccurred+0xfa>
 80025ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d09d      	beq.n	800252e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d103      	bne.n	8002602 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2220      	movs	r2, #32
 8002600:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002632:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00b      	beq.n	800265c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	f043 0308 	orr.w	r3, r3, #8
 800264a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002654:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00b      	beq.n	800267e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	f043 0302 	orr.w	r3, r3, #2
 800266c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002676:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800267e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002682:	2b00      	cmp	r3, #0
 8002684:	d01c      	beq.n	80026c0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f7ff fe56 	bl	8002338 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6859      	ldr	r1, [r3, #4]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <I2C_IsErrorOccurred+0x1d4>)
 8002698:	400b      	ands	r3, r1
 800269a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80026c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3728      	adds	r7, #40	; 0x28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	fe00e800 	.word	0xfe00e800

080026d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	460b      	mov	r3, r1
 80026dc:	817b      	strh	r3, [r7, #10]
 80026de:	4613      	mov	r3, r2
 80026e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026e2:	897b      	ldrh	r3, [r7, #10]
 80026e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026e8:	7a7b      	ldrb	r3, [r7, #9]
 80026ea:	041b      	lsls	r3, r3, #16
 80026ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026f0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026fe:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	0d5b      	lsrs	r3, r3, #21
 800270a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <I2C_TransferConfig+0x60>)
 8002710:	430b      	orrs	r3, r1
 8002712:	43db      	mvns	r3, r3
 8002714:	ea02 0103 	and.w	r1, r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	430a      	orrs	r2, r1
 8002720:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002722:	bf00      	nop
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	03ff63ff 	.word	0x03ff63ff

08002734 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b20      	cmp	r3, #32
 8002748:	d138      	bne.n	80027bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002754:	2302      	movs	r3, #2
 8002756:	e032      	b.n	80027be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2224      	movs	r2, #36	; 0x24
 8002764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0201 	bic.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002786:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6819      	ldr	r1, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e000      	b.n	80027be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027bc:	2302      	movs	r3, #2
  }
}
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b085      	sub	sp, #20
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d139      	bne.n	8002854 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e033      	b.n	8002856 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2224      	movs	r2, #36	; 0x24
 80027fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0201 	bic.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800281c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	e000      	b.n	8002856 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002854:	2302      	movs	r3, #2
  }
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
	...

08002864 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	4b23      	ldr	r3, [pc, #140]	; (80028fc <HAL_PWREx_EnableOverDrive+0x98>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	4a22      	ldr	r2, [pc, #136]	; (80028fc <HAL_PWREx_EnableOverDrive+0x98>)
 8002874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002878:	6413      	str	r3, [r2, #64]	; 0x40
 800287a:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_PWREx_EnableOverDrive+0x98>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002886:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <HAL_PWREx_EnableOverDrive+0x9c>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002890:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002892:	f7ff f875 	bl	8001980 <HAL_GetTick>
 8002896:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002898:	e009      	b.n	80028ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800289a:	f7ff f871 	bl	8001980 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028a8:	d901      	bls.n	80028ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e022      	b.n	80028f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028ae:	4b14      	ldr	r3, [pc, #80]	; (8002900 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ba:	d1ee      	bne.n	800289a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028bc:	4b10      	ldr	r3, [pc, #64]	; (8002900 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0f      	ldr	r2, [pc, #60]	; (8002900 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028c8:	f7ff f85a 	bl	8001980 <HAL_GetTick>
 80028cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028ce:	e009      	b.n	80028e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028d0:	f7ff f856 	bl	8001980 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028de:	d901      	bls.n	80028e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e007      	b.n	80028f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028f0:	d1ee      	bne.n	80028d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40023800 	.word	0x40023800
 8002900:	40007000 	.word	0x40007000

08002904 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800290c:	2300      	movs	r3, #0
 800290e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e291      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8087 	beq.w	8002a36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002928:	4b96      	ldr	r3, [pc, #600]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 030c 	and.w	r3, r3, #12
 8002930:	2b04      	cmp	r3, #4
 8002932:	d00c      	beq.n	800294e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002934:	4b93      	ldr	r3, [pc, #588]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 030c 	and.w	r3, r3, #12
 800293c:	2b08      	cmp	r3, #8
 800293e:	d112      	bne.n	8002966 <HAL_RCC_OscConfig+0x62>
 8002940:	4b90      	ldr	r3, [pc, #576]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800294c:	d10b      	bne.n	8002966 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294e:	4b8d      	ldr	r3, [pc, #564]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d06c      	beq.n	8002a34 <HAL_RCC_OscConfig+0x130>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d168      	bne.n	8002a34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e26b      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296e:	d106      	bne.n	800297e <HAL_RCC_OscConfig+0x7a>
 8002970:	4b84      	ldr	r3, [pc, #528]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a83      	ldr	r2, [pc, #524]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	e02e      	b.n	80029dc <HAL_RCC_OscConfig+0xd8>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x9c>
 8002986:	4b7f      	ldr	r3, [pc, #508]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a7e      	ldr	r2, [pc, #504]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 800298c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b7c      	ldr	r3, [pc, #496]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a7b      	ldr	r2, [pc, #492]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e01d      	b.n	80029dc <HAL_RCC_OscConfig+0xd8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0xc0>
 80029aa:	4b76      	ldr	r3, [pc, #472]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a75      	ldr	r2, [pc, #468]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 80029b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b73      	ldr	r3, [pc, #460]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a72      	ldr	r2, [pc, #456]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 80029bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e00b      	b.n	80029dc <HAL_RCC_OscConfig+0xd8>
 80029c4:	4b6f      	ldr	r3, [pc, #444]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a6e      	ldr	r2, [pc, #440]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 80029ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	4b6c      	ldr	r3, [pc, #432]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a6b      	ldr	r2, [pc, #428]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 80029d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d013      	beq.n	8002a0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe ffcc 	bl	8001980 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ec:	f7fe ffc8 	bl	8001980 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b64      	cmp	r3, #100	; 0x64
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e21f      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	4b61      	ldr	r3, [pc, #388]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0xe8>
 8002a0a:	e014      	b.n	8002a36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe ffb8 	bl	8001980 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a14:	f7fe ffb4 	bl	8001980 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	; 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e20b      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a26:	4b57      	ldr	r3, [pc, #348]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x110>
 8002a32:	e000      	b.n	8002a36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d069      	beq.n	8002b16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a42:	4b50      	ldr	r3, [pc, #320]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00b      	beq.n	8002a66 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a4e:	4b4d      	ldr	r3, [pc, #308]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d11c      	bne.n	8002a94 <HAL_RCC_OscConfig+0x190>
 8002a5a:	4b4a      	ldr	r3, [pc, #296]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d116      	bne.n	8002a94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a66:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_RCC_OscConfig+0x17a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d001      	beq.n	8002a7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e1df      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7e:	4b41      	ldr	r3, [pc, #260]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	493d      	ldr	r1, [pc, #244]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a92:	e040      	b.n	8002b16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d023      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a9c:	4b39      	ldr	r3, [pc, #228]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a38      	ldr	r2, [pc, #224]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7fe ff6a 	bl	8001980 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab0:	f7fe ff66 	bl	8001980 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e1bd      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac2:	4b30      	ldr	r3, [pc, #192]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ace:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4929      	ldr	r1, [pc, #164]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]
 8002ae2:	e018      	b.n	8002b16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae4:	4b27      	ldr	r3, [pc, #156]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a26      	ldr	r2, [pc, #152]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002aea:	f023 0301 	bic.w	r3, r3, #1
 8002aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe ff46 	bl	8001980 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af8:	f7fe ff42 	bl	8001980 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e199      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d038      	beq.n	8002b94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d019      	beq.n	8002b5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b2a:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2e:	4a15      	ldr	r2, [pc, #84]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b36:	f7fe ff23 	bl	8001980 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b3e:	f7fe ff1f 	bl	8001980 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e176      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b50:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x23a>
 8002b5c:	e01a      	b.n	8002b94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b62:	4a08      	ldr	r2, [pc, #32]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6a:	f7fe ff09 	bl	8001980 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b70:	e00a      	b.n	8002b88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b72:	f7fe ff05 	bl	8001980 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d903      	bls.n	8002b88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e15c      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
 8002b84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b88:	4b91      	ldr	r3, [pc, #580]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1ee      	bne.n	8002b72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80a4 	beq.w	8002cea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba2:	4b8b      	ldr	r3, [pc, #556]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10d      	bne.n	8002bca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	4b88      	ldr	r3, [pc, #544]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4a87      	ldr	r2, [pc, #540]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bba:	4b85      	ldr	r3, [pc, #532]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bca:	4b82      	ldr	r3, [pc, #520]	; (8002dd4 <HAL_RCC_OscConfig+0x4d0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d118      	bne.n	8002c08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bd6:	4b7f      	ldr	r3, [pc, #508]	; (8002dd4 <HAL_RCC_OscConfig+0x4d0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a7e      	ldr	r2, [pc, #504]	; (8002dd4 <HAL_RCC_OscConfig+0x4d0>)
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be2:	f7fe fecd 	bl	8001980 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bea:	f7fe fec9 	bl	8001980 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b64      	cmp	r3, #100	; 0x64
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e120      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bfc:	4b75      	ldr	r3, [pc, #468]	; (8002dd4 <HAL_RCC_OscConfig+0x4d0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCC_OscConfig+0x31a>
 8002c10:	4b6f      	ldr	r3, [pc, #444]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c14:	4a6e      	ldr	r2, [pc, #440]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1c:	e02d      	b.n	8002c7a <HAL_RCC_OscConfig+0x376>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x33c>
 8002c26:	4b6a      	ldr	r3, [pc, #424]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	4a69      	ldr	r2, [pc, #420]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c2c:	f023 0301 	bic.w	r3, r3, #1
 8002c30:	6713      	str	r3, [r2, #112]	; 0x70
 8002c32:	4b67      	ldr	r3, [pc, #412]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	4a66      	ldr	r2, [pc, #408]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c38:	f023 0304 	bic.w	r3, r3, #4
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3e:	e01c      	b.n	8002c7a <HAL_RCC_OscConfig+0x376>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	d10c      	bne.n	8002c62 <HAL_RCC_OscConfig+0x35e>
 8002c48:	4b61      	ldr	r3, [pc, #388]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4c:	4a60      	ldr	r2, [pc, #384]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c4e:	f043 0304 	orr.w	r3, r3, #4
 8002c52:	6713      	str	r3, [r2, #112]	; 0x70
 8002c54:	4b5e      	ldr	r3, [pc, #376]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	4a5d      	ldr	r2, [pc, #372]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c60:	e00b      	b.n	8002c7a <HAL_RCC_OscConfig+0x376>
 8002c62:	4b5b      	ldr	r3, [pc, #364]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c66:	4a5a      	ldr	r2, [pc, #360]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6e:	4b58      	ldr	r3, [pc, #352]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c72:	4a57      	ldr	r2, [pc, #348]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c74:	f023 0304 	bic.w	r3, r3, #4
 8002c78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d015      	beq.n	8002cae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c82:	f7fe fe7d 	bl	8001980 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c88:	e00a      	b.n	8002ca0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8a:	f7fe fe79 	bl	8001980 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e0ce      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca0:	4b4b      	ldr	r3, [pc, #300]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0ee      	beq.n	8002c8a <HAL_RCC_OscConfig+0x386>
 8002cac:	e014      	b.n	8002cd8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cae:	f7fe fe67 	bl	8001980 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb6:	f7fe fe63 	bl	8001980 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e0b8      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ccc:	4b40      	ldr	r3, [pc, #256]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1ee      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d105      	bne.n	8002cea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cde:	4b3c      	ldr	r3, [pc, #240]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	4a3b      	ldr	r2, [pc, #236]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80a4 	beq.w	8002e3c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf4:	4b36      	ldr	r3, [pc, #216]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d06b      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d149      	bne.n	8002d9c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d08:	4b31      	ldr	r3, [pc, #196]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a30      	ldr	r2, [pc, #192]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe fe34 	bl	8001980 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fe fe30 	bl	8001980 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e087      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2e:	4b28      	ldr	r3, [pc, #160]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69da      	ldr	r2, [r3, #28]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	019b      	lsls	r3, r3, #6
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	085b      	lsrs	r3, r3, #1
 8002d52:	3b01      	subs	r3, #1
 8002d54:	041b      	lsls	r3, r3, #16
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	061b      	lsls	r3, r3, #24
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	4a1b      	ldr	r2, [pc, #108]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002d62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d66:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d68:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe fe04 	bl	8001980 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7fe fe00 	bl	8001980 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e057      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8e:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x478>
 8002d9a:	e04f      	b.n	8002e3c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe fdea 	bl	8001980 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe fde6 	bl	8001980 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e03d      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc2:	4b03      	ldr	r3, [pc, #12]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x4ac>
 8002dce:	e035      	b.n	8002e3c <HAL_RCC_OscConfig+0x538>
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <HAL_RCC_OscConfig+0x544>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d028      	beq.n	8002e38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d121      	bne.n	8002e38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d11a      	bne.n	8002e38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e08:	4013      	ands	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d111      	bne.n	8002e38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	085b      	lsrs	r3, r3, #1
 8002e20:	3b01      	subs	r3, #1
 8002e22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d107      	bne.n	8002e38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800

08002e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0d0      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e64:	4b6a      	ldr	r3, [pc, #424]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d910      	bls.n	8002e94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b67      	ldr	r3, [pc, #412]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 020f 	bic.w	r2, r3, #15
 8002e7a:	4965      	ldr	r1, [pc, #404]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b63      	ldr	r3, [pc, #396]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0b8      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d020      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eac:	4b59      	ldr	r3, [pc, #356]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4a58      	ldr	r2, [pc, #352]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ec4:	4b53      	ldr	r3, [pc, #332]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	4a52      	ldr	r2, [pc, #328]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ece:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed0:	4b50      	ldr	r3, [pc, #320]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	494d      	ldr	r1, [pc, #308]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d040      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d107      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	4b47      	ldr	r3, [pc, #284]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d115      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e07f      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d107      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0e:	4b41      	ldr	r3, [pc, #260]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e073      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1e:	4b3d      	ldr	r3, [pc, #244]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e06b      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f2e:	4b39      	ldr	r3, [pc, #228]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f023 0203 	bic.w	r2, r3, #3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4936      	ldr	r1, [pc, #216]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f40:	f7fe fd1e 	bl	8001980 <HAL_GetTick>
 8002f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f46:	e00a      	b.n	8002f5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f48:	f7fe fd1a 	bl	8001980 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e053      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5e:	4b2d      	ldr	r3, [pc, #180]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 020c 	and.w	r2, r3, #12
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d1eb      	bne.n	8002f48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f70:	4b27      	ldr	r3, [pc, #156]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 030f 	and.w	r3, r3, #15
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d210      	bcs.n	8002fa0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b24      	ldr	r3, [pc, #144]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 020f 	bic.w	r2, r3, #15
 8002f86:	4922      	ldr	r1, [pc, #136]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b20      	ldr	r3, [pc, #128]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e032      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fac:	4b19      	ldr	r3, [pc, #100]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4916      	ldr	r1, [pc, #88]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	490e      	ldr	r1, [pc, #56]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fde:	f000 f821 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	490a      	ldr	r1, [pc, #40]	; (8003018 <HAL_RCC_ClockConfig+0x1cc>)
 8002ff0:	5ccb      	ldrb	r3, [r1, r3]
 8002ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff6:	4a09      	ldr	r2, [pc, #36]	; (800301c <HAL_RCC_ClockConfig+0x1d0>)
 8002ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ffa:	4b09      	ldr	r3, [pc, #36]	; (8003020 <HAL_RCC_ClockConfig+0x1d4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe fc7a 	bl	80018f8 <HAL_InitTick>

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023c00 	.word	0x40023c00
 8003014:	40023800 	.word	0x40023800
 8003018:	080062e8 	.word	0x080062e8
 800301c:	20000000 	.word	0x20000000
 8003020:	20000004 	.word	0x20000004

08003024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003028:	b090      	sub	sp, #64	; 0x40
 800302a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800302c:	2300      	movs	r3, #0
 800302e:	637b      	str	r3, [r7, #52]	; 0x34
 8003030:	2300      	movs	r3, #0
 8003032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003034:	2300      	movs	r3, #0
 8003036:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800303c:	4b59      	ldr	r3, [pc, #356]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	2b08      	cmp	r3, #8
 8003046:	d00d      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x40>
 8003048:	2b08      	cmp	r3, #8
 800304a:	f200 80a1 	bhi.w	8003190 <HAL_RCC_GetSysClockFreq+0x16c>
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0x34>
 8003052:	2b04      	cmp	r3, #4
 8003054:	d003      	beq.n	800305e <HAL_RCC_GetSysClockFreq+0x3a>
 8003056:	e09b      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003058:	4b53      	ldr	r3, [pc, #332]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800305a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800305c:	e09b      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800305e:	4b53      	ldr	r3, [pc, #332]	; (80031ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003060:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003062:	e098      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003064:	4b4f      	ldr	r3, [pc, #316]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800306c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800306e:	4b4d      	ldr	r3, [pc, #308]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d028      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307a:	4b4a      	ldr	r3, [pc, #296]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	099b      	lsrs	r3, r3, #6
 8003080:	2200      	movs	r2, #0
 8003082:	623b      	str	r3, [r7, #32]
 8003084:	627a      	str	r2, [r7, #36]	; 0x24
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800308c:	2100      	movs	r1, #0
 800308e:	4b47      	ldr	r3, [pc, #284]	; (80031ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003090:	fb03 f201 	mul.w	r2, r3, r1
 8003094:	2300      	movs	r3, #0
 8003096:	fb00 f303 	mul.w	r3, r0, r3
 800309a:	4413      	add	r3, r2
 800309c:	4a43      	ldr	r2, [pc, #268]	; (80031ac <HAL_RCC_GetSysClockFreq+0x188>)
 800309e:	fba0 1202 	umull	r1, r2, r0, r2
 80030a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030a4:	460a      	mov	r2, r1
 80030a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80030a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030aa:	4413      	add	r3, r2
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b0:	2200      	movs	r2, #0
 80030b2:	61bb      	str	r3, [r7, #24]
 80030b4:	61fa      	str	r2, [r7, #28]
 80030b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030be:	f7fd f8f7 	bl	80002b0 <__aeabi_uldivmod>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4613      	mov	r3, r2
 80030c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ca:	e053      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030cc:	4b35      	ldr	r3, [pc, #212]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	099b      	lsrs	r3, r3, #6
 80030d2:	2200      	movs	r2, #0
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	617a      	str	r2, [r7, #20]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030de:	f04f 0b00 	mov.w	fp, #0
 80030e2:	4652      	mov	r2, sl
 80030e4:	465b      	mov	r3, fp
 80030e6:	f04f 0000 	mov.w	r0, #0
 80030ea:	f04f 0100 	mov.w	r1, #0
 80030ee:	0159      	lsls	r1, r3, #5
 80030f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030f4:	0150      	lsls	r0, r2, #5
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	ebb2 080a 	subs.w	r8, r2, sl
 80030fe:	eb63 090b 	sbc.w	r9, r3, fp
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800310e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003112:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003116:	ebb2 0408 	subs.w	r4, r2, r8
 800311a:	eb63 0509 	sbc.w	r5, r3, r9
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	00eb      	lsls	r3, r5, #3
 8003128:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800312c:	00e2      	lsls	r2, r4, #3
 800312e:	4614      	mov	r4, r2
 8003130:	461d      	mov	r5, r3
 8003132:	eb14 030a 	adds.w	r3, r4, sl
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	eb45 030b 	adc.w	r3, r5, fp
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	e9d7 4500 	ldrd	r4, r5, [r7]
 800314a:	4629      	mov	r1, r5
 800314c:	028b      	lsls	r3, r1, #10
 800314e:	4621      	mov	r1, r4
 8003150:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003154:	4621      	mov	r1, r4
 8003156:	028a      	lsls	r2, r1, #10
 8003158:	4610      	mov	r0, r2
 800315a:	4619      	mov	r1, r3
 800315c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315e:	2200      	movs	r2, #0
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	60fa      	str	r2, [r7, #12]
 8003164:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003168:	f7fd f8a2 	bl	80002b0 <__aeabi_uldivmod>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4613      	mov	r3, r2
 8003172:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	0c1b      	lsrs	r3, r3, #16
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	3301      	adds	r3, #1
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003184:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003188:	fbb2 f3f3 	udiv	r3, r2, r3
 800318c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800318e:	e002      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003192:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003198:	4618      	mov	r0, r3
 800319a:	3740      	adds	r7, #64	; 0x40
 800319c:	46bd      	mov	sp, r7
 800319e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800
 80031a8:	00f42400 	.word	0x00f42400
 80031ac:	017d7840 	.word	0x017d7840

080031b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031b6:	681b      	ldr	r3, [r3, #0]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20000000 	.word	0x20000000

080031c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031cc:	f7ff fff0 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	0a9b      	lsrs	r3, r3, #10
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4903      	ldr	r1, [pc, #12]	; (80031ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80031de:	5ccb      	ldrb	r3, [r1, r3]
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40023800 	.word	0x40023800
 80031ec:	080062f8 	.word	0x080062f8

080031f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031f4:	f7ff ffdc 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 80031f8:	4602      	mov	r2, r0
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	0b5b      	lsrs	r3, r3, #13
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	4903      	ldr	r1, [pc, #12]	; (8003214 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003206:	5ccb      	ldrb	r3, [r1, r3]
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800320c:	4618      	mov	r0, r3
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40023800 	.word	0x40023800
 8003214:	080062f8 	.word	0x080062f8

08003218 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d012      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003240:	4b69      	ldr	r3, [pc, #420]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a68      	ldr	r2, [pc, #416]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003246:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800324a:	6093      	str	r3, [r2, #8]
 800324c:	4b66      	ldr	r3, [pc, #408]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003254:	4964      	ldr	r1, [pc, #400]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003256:	4313      	orrs	r3, r2
 8003258:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003262:	2301      	movs	r3, #1
 8003264:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d017      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003272:	4b5d      	ldr	r3, [pc, #372]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003278:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003280:	4959      	ldr	r1, [pc, #356]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003290:	d101      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003292:	2301      	movs	r3, #1
 8003294:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800329e:	2301      	movs	r3, #1
 80032a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d017      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032ae:	4b4e      	ldr	r3, [pc, #312]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	494a      	ldr	r1, [pc, #296]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032cc:	d101      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80032ce:	2301      	movs	r3, #1
 80032d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80032da:	2301      	movs	r3, #1
 80032dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80032ea:	2301      	movs	r3, #1
 80032ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 808b 	beq.w	8003412 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032fc:	4b3a      	ldr	r3, [pc, #232]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	4a39      	ldr	r2, [pc, #228]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003306:	6413      	str	r3, [r2, #64]	; 0x40
 8003308:	4b37      	ldr	r3, [pc, #220]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003314:	4b35      	ldr	r3, [pc, #212]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a34      	ldr	r2, [pc, #208]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800331a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003320:	f7fe fb2e 	bl	8001980 <HAL_GetTick>
 8003324:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003326:	e008      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003328:	f7fe fb2a 	bl	8001980 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	; 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e357      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800333a:	4b2c      	ldr	r3, [pc, #176]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003346:	4b28      	ldr	r3, [pc, #160]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d035      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	429a      	cmp	r2, r3
 8003362:	d02e      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003364:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800336e:	4b1e      	ldr	r3, [pc, #120]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800337a:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	4a1a      	ldr	r2, [pc, #104]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003384:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003386:	4a18      	ldr	r2, [pc, #96]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800338c:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b01      	cmp	r3, #1
 8003396:	d114      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fe faf2 	bl	8001980 <HAL_GetTick>
 800339c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339e:	e00a      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a0:	f7fe faee 	bl	8001980 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e319      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b6:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0ee      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ce:	d111      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033dc:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033de:	400b      	ands	r3, r1
 80033e0:	4901      	ldr	r1, [pc, #4]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
 80033e6:	e00b      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80033e8:	40023800 	.word	0x40023800
 80033ec:	40007000 	.word	0x40007000
 80033f0:	0ffffcff 	.word	0x0ffffcff
 80033f4:	4baa      	ldr	r3, [pc, #680]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	4aa9      	ldr	r2, [pc, #676]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033fe:	6093      	str	r3, [r2, #8]
 8003400:	4ba7      	ldr	r3, [pc, #668]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003402:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800340c:	49a4      	ldr	r1, [pc, #656]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800340e:	4313      	orrs	r3, r2
 8003410:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b00      	cmp	r3, #0
 800341c:	d010      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800341e:	4ba0      	ldr	r3, [pc, #640]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003424:	4a9e      	ldr	r2, [pc, #632]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800342a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800342e:	4b9c      	ldr	r3, [pc, #624]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003430:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003438:	4999      	ldr	r1, [pc, #612]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800344c:	4b94      	ldr	r3, [pc, #592]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800345a:	4991      	ldr	r1, [pc, #580]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800346e:	4b8c      	ldr	r3, [pc, #560]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003474:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800347c:	4988      	ldr	r1, [pc, #544]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003490:	4b83      	ldr	r3, [pc, #524]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003496:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800349e:	4980      	ldr	r1, [pc, #512]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034b2:	4b7b      	ldr	r3, [pc, #492]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c0:	4977      	ldr	r1, [pc, #476]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034d4:	4b72      	ldr	r3, [pc, #456]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034da:	f023 0203 	bic.w	r2, r3, #3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	496f      	ldr	r1, [pc, #444]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034f6:	4b6a      	ldr	r3, [pc, #424]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fc:	f023 020c 	bic.w	r2, r3, #12
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003504:	4966      	ldr	r1, [pc, #408]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003518:	4b61      	ldr	r3, [pc, #388]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003526:	495e      	ldr	r1, [pc, #376]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800353a:	4b59      	ldr	r3, [pc, #356]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800353c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003540:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003548:	4955      	ldr	r1, [pc, #340]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800355c:	4b50      	ldr	r3, [pc, #320]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003562:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356a:	494d      	ldr	r1, [pc, #308]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800357e:	4b48      	ldr	r3, [pc, #288]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003584:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358c:	4944      	ldr	r1, [pc, #272]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80035a0:	4b3f      	ldr	r3, [pc, #252]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ae:	493c      	ldr	r1, [pc, #240]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80035c2:	4b37      	ldr	r3, [pc, #220]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d0:	4933      	ldr	r1, [pc, #204]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035e4:	4b2e      	ldr	r3, [pc, #184]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035f2:	492b      	ldr	r1, [pc, #172]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d011      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003606:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003614:	4922      	ldr	r1, [pc, #136]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003620:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003624:	d101      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003626:	2301      	movs	r3, #1
 8003628:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003636:	2301      	movs	r3, #1
 8003638:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003646:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003654:	4912      	ldr	r1, [pc, #72]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00b      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003668:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003678:	4909      	ldr	r1, [pc, #36]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d006      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 80d9 	beq.w	8003846 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003694:	4b02      	ldr	r3, [pc, #8]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a01      	ldr	r2, [pc, #4]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800369a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800369e:	e001      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80036a0:	40023800 	.word	0x40023800
 80036a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a6:	f7fe f96b 	bl	8001980 <HAL_GetTick>
 80036aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036ac:	e008      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036ae:	f7fe f967 	bl	8001980 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b64      	cmp	r3, #100	; 0x64
 80036ba:	d901      	bls.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e194      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036c0:	4b6c      	ldr	r3, [pc, #432]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1f0      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d021      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d11d      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036e0:	4b64      	ldr	r3, [pc, #400]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e6:	0c1b      	lsrs	r3, r3, #16
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036ee:	4b61      	ldr	r3, [pc, #388]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f4:	0e1b      	lsrs	r3, r3, #24
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	019a      	lsls	r2, r3, #6
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	041b      	lsls	r3, r3, #16
 8003706:	431a      	orrs	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	061b      	lsls	r3, r3, #24
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	071b      	lsls	r3, r3, #28
 8003714:	4957      	ldr	r1, [pc, #348]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d004      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003730:	d00a      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800373a:	2b00      	cmp	r3, #0
 800373c:	d02e      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003746:	d129      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003748:	4b4a      	ldr	r3, [pc, #296]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800374a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800374e:	0c1b      	lsrs	r3, r3, #16
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003756:	4b47      	ldr	r3, [pc, #284]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800375c:	0f1b      	lsrs	r3, r3, #28
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	019a      	lsls	r2, r3, #6
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	041b      	lsls	r3, r3, #16
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	061b      	lsls	r3, r3, #24
 8003776:	431a      	orrs	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	071b      	lsls	r3, r3, #28
 800377c:	493d      	ldr	r1, [pc, #244]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003784:	4b3b      	ldr	r3, [pc, #236]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800378a:	f023 021f 	bic.w	r2, r3, #31
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	3b01      	subs	r3, #1
 8003794:	4937      	ldr	r1, [pc, #220]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01d      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037a8:	4b32      	ldr	r3, [pc, #200]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ae:	0e1b      	lsrs	r3, r3, #24
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037b6:	4b2f      	ldr	r3, [pc, #188]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037bc:	0f1b      	lsrs	r3, r3, #28
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	019a      	lsls	r2, r3, #6
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	041b      	lsls	r3, r3, #16
 80037d0:	431a      	orrs	r2, r3
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	061b      	lsls	r3, r3, #24
 80037d6:	431a      	orrs	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	071b      	lsls	r3, r3, #28
 80037dc:	4925      	ldr	r1, [pc, #148]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d011      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	019a      	lsls	r2, r3, #6
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	041b      	lsls	r3, r3, #16
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	061b      	lsls	r3, r3, #24
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	071b      	lsls	r3, r3, #28
 800380c:	4919      	ldr	r1, [pc, #100]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003814:	4b17      	ldr	r3, [pc, #92]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a16      	ldr	r2, [pc, #88]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800381a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800381e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003820:	f7fe f8ae 	bl	8001980 <HAL_GetTick>
 8003824:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003826:	e008      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003828:	f7fe f8aa 	bl	8001980 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	; 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e0d7      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800383a:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	2b01      	cmp	r3, #1
 800384a:	f040 80cd 	bne.w	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a08      	ldr	r2, [pc, #32]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800385a:	f7fe f891 	bl	8001980 <HAL_GetTick>
 800385e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003862:	f7fe f88d 	bl	8001980 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b64      	cmp	r3, #100	; 0x64
 800386e:	d903      	bls.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e0ba      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003874:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003878:	4b5e      	ldr	r3, [pc, #376]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003884:	d0ed      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	2b00      	cmp	r3, #0
 8003898:	d009      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d02e      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d12a      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038ae:	4b51      	ldr	r3, [pc, #324]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b4:	0c1b      	lsrs	r3, r3, #16
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038bc:	4b4d      	ldr	r3, [pc, #308]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	0f1b      	lsrs	r3, r3, #28
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	019a      	lsls	r2, r3, #6
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	041b      	lsls	r3, r3, #16
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	061b      	lsls	r3, r3, #24
 80038dc:	431a      	orrs	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	071b      	lsls	r3, r3, #28
 80038e2:	4944      	ldr	r1, [pc, #272]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038ea:	4b42      	ldr	r3, [pc, #264]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	3b01      	subs	r3, #1
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	493d      	ldr	r1, [pc, #244]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d022      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003918:	d11d      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800391a:	4b36      	ldr	r3, [pc, #216]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800391c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003920:	0e1b      	lsrs	r3, r3, #24
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003928:	4b32      	ldr	r3, [pc, #200]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392e:	0f1b      	lsrs	r3, r3, #28
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	019a      	lsls	r2, r3, #6
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	041b      	lsls	r3, r3, #16
 8003942:	431a      	orrs	r2, r3
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	061b      	lsls	r3, r3, #24
 8003948:	431a      	orrs	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	071b      	lsls	r3, r3, #28
 800394e:	4929      	ldr	r1, [pc, #164]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d028      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003962:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003968:	0e1b      	lsrs	r3, r3, #24
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003970:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003976:	0c1b      	lsrs	r3, r3, #16
 8003978:	f003 0303 	and.w	r3, r3, #3
 800397c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	019a      	lsls	r2, r3, #6
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	041b      	lsls	r3, r3, #16
 8003988:	431a      	orrs	r2, r3
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	061b      	lsls	r3, r3, #24
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	071b      	lsls	r3, r3, #28
 8003996:	4917      	ldr	r1, [pc, #92]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800399e:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	4911      	ldr	r1, [pc, #68]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039b4:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a0e      	ldr	r2, [pc, #56]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c0:	f7fd ffde 	bl	8001980 <HAL_GetTick>
 80039c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039c8:	f7fd ffda 	bl	8001980 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	; 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e007      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039da:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039e6:	d1ef      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3720      	adds	r7, #32
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40023800 	.word	0x40023800

080039f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e09d      	b.n	8003b46 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d108      	bne.n	8003a24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a1a:	d009      	beq.n	8003a30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	61da      	str	r2, [r3, #28]
 8003a22:	e005      	b.n	8003a30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fd fd14 	bl	8001478 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a70:	d902      	bls.n	8003a78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	e002      	b.n	8003a7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a86:	d007      	beq.n	8003a98 <HAL_SPI_Init+0xa0>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a90:	d002      	beq.n	8003a98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ada:	ea42 0103 	orr.w	r1, r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	0c1b      	lsrs	r3, r3, #16
 8003af4:	f003 0204 	and.w	r2, r3, #4
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b14:	ea42 0103 	orr.w	r1, r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b088      	sub	sp, #32
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	603b      	str	r3, [r7, #0]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_SPI_Transmit+0x22>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e158      	b.n	8003e22 <HAL_SPI_Transmit+0x2d4>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b78:	f7fd ff02 	bl	8001980 <HAL_GetTick>
 8003b7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b7e:	88fb      	ldrh	r3, [r7, #6]
 8003b80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d002      	beq.n	8003b94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b92:	e13d      	b.n	8003e10 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_SPI_Transmit+0x52>
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ba4:	e134      	b.n	8003e10 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2203      	movs	r2, #3
 8003baa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	88fa      	ldrh	r2, [r7, #6]
 8003bbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	88fa      	ldrh	r2, [r7, #6]
 8003bc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf0:	d10f      	bne.n	8003c12 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1c:	2b40      	cmp	r3, #64	; 0x40
 8003c1e:	d007      	beq.n	8003c30 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c38:	d94b      	bls.n	8003cd2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <HAL_SPI_Transmit+0xfa>
 8003c42:	8afb      	ldrh	r3, [r7, #22]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d13e      	bne.n	8003cc6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	881a      	ldrh	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	1c9a      	adds	r2, r3, #2
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c6c:	e02b      	b.n	8003cc6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d112      	bne.n	8003ca2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	881a      	ldrh	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	1c9a      	adds	r2, r3, #2
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ca0:	e011      	b.n	8003cc6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ca2:	f7fd fe6d 	bl	8001980 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d803      	bhi.n	8003cba <HAL_SPI_Transmit+0x16c>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb8:	d102      	bne.n	8003cc0 <HAL_SPI_Transmit+0x172>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d102      	bne.n	8003cc6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cc4:	e0a4      	b.n	8003e10 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1ce      	bne.n	8003c6e <HAL_SPI_Transmit+0x120>
 8003cd0:	e07c      	b.n	8003dcc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <HAL_SPI_Transmit+0x192>
 8003cda:	8afb      	ldrh	r3, [r7, #22]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d170      	bne.n	8003dc2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d912      	bls.n	8003d10 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	881a      	ldrh	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	1c9a      	adds	r2, r3, #2
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b02      	subs	r3, #2
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d0e:	e058      	b.n	8003dc2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	330c      	adds	r3, #12
 8003d1a:	7812      	ldrb	r2, [r2, #0]
 8003d1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003d36:	e044      	b.n	8003dc2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d12b      	bne.n	8003d9e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d912      	bls.n	8003d76 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	881a      	ldrh	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	1c9a      	adds	r2, r3, #2
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b02      	subs	r3, #2
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d74:	e025      	b.n	8003dc2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	330c      	adds	r3, #12
 8003d80:	7812      	ldrb	r2, [r2, #0]
 8003d82:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d9c:	e011      	b.n	8003dc2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d9e:	f7fd fdef 	bl	8001980 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d803      	bhi.n	8003db6 <HAL_SPI_Transmit+0x268>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d102      	bne.n	8003dbc <HAL_SPI_Transmit+0x26e>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003dc0:	e026      	b.n	8003e10 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1b5      	bne.n	8003d38 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	6839      	ldr	r1, [r7, #0]
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 fd07 	bl	80047e4 <SPI_EndRxTxTransaction>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dea:	2300      	movs	r3, #0
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	77fb      	strb	r3, [r7, #31]
 8003e0c:	e000      	b.n	8003e10 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003e0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e20:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3720      	adds	r7, #32
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b088      	sub	sp, #32
 8003e2e:	af02      	add	r7, sp, #8
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	603b      	str	r3, [r7, #0]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e46:	d112      	bne.n	8003e6e <HAL_SPI_Receive+0x44>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10e      	bne.n	8003e6e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2204      	movs	r2, #4
 8003e54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e58:	88fa      	ldrh	r2, [r7, #6]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f910 	bl	800408a <HAL_SPI_TransmitReceive>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	e109      	b.n	8004082 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_SPI_Receive+0x52>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e102      	b.n	8004082 <HAL_SPI_Receive+0x258>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e84:	f7fd fd7c 	bl	8001980 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d002      	beq.n	8003e9c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003e96:	2302      	movs	r3, #2
 8003e98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e9a:	e0e9      	b.n	8004070 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_SPI_Receive+0x7e>
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003eac:	e0e0      	b.n	8004070 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	88fa      	ldrh	r2, [r7, #6]
 8003ec6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	88fa      	ldrh	r2, [r7, #6]
 8003ece:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ef8:	d908      	bls.n	8003f0c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f08:	605a      	str	r2, [r3, #4]
 8003f0a:	e007      	b.n	8003f1c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f1a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f24:	d10f      	bne.n	8003f46 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f44:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f50:	2b40      	cmp	r3, #64	; 0x40
 8003f52:	d007      	beq.n	8003f64 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f62:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f6c:	d867      	bhi.n	800403e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f6e:	e030      	b.n	8003fd2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d117      	bne.n	8003fae <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f103 020c 	add.w	r2, r3, #12
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	7812      	ldrb	r2, [r2, #0]
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003fac:	e011      	b.n	8003fd2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fae:	f7fd fce7 	bl	8001980 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d803      	bhi.n	8003fc6 <HAL_SPI_Receive+0x19c>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d102      	bne.n	8003fcc <HAL_SPI_Receive+0x1a2>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d102      	bne.n	8003fd2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003fd0:	e04e      	b.n	8004070 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1c8      	bne.n	8003f70 <HAL_SPI_Receive+0x146>
 8003fde:	e034      	b.n	800404a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d115      	bne.n	800401a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	b292      	uxth	r2, r2
 8003ffa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	1c9a      	adds	r2, r3, #2
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004018:	e011      	b.n	800403e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800401a:	f7fd fcb1 	bl	8001980 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d803      	bhi.n	8004032 <HAL_SPI_Receive+0x208>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004030:	d102      	bne.n	8004038 <HAL_SPI_Receive+0x20e>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d102      	bne.n	800403e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800403c:	e018      	b.n	8004070 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1ca      	bne.n	8003fe0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	6839      	ldr	r1, [r7, #0]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 fb4c 	bl	80046ec <SPI_EndRxTransaction>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	75fb      	strb	r3, [r7, #23]
 800406c:	e000      	b.n	8004070 <HAL_SPI_Receive+0x246>
  }

error :
 800406e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004080:	7dfb      	ldrb	r3, [r7, #23]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b08a      	sub	sp, #40	; 0x28
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
 8004096:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004098:	2301      	movs	r3, #1
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_SPI_TransmitReceive+0x26>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e1fb      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x41e>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040b8:	f7fd fc62 	bl	8001980 <HAL_GetTick>
 80040bc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040c4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80040cc:	887b      	ldrh	r3, [r7, #2]
 80040ce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80040d0:	887b      	ldrh	r3, [r7, #2]
 80040d2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040d4:	7efb      	ldrb	r3, [r7, #27]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d00e      	beq.n	80040f8 <HAL_SPI_TransmitReceive+0x6e>
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040e0:	d106      	bne.n	80040f0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d102      	bne.n	80040f0 <HAL_SPI_TransmitReceive+0x66>
 80040ea:	7efb      	ldrb	r3, [r7, #27]
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d003      	beq.n	80040f8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80040f0:	2302      	movs	r3, #2
 80040f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80040f6:	e1cd      	b.n	8004494 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d005      	beq.n	800410a <HAL_SPI_TransmitReceive+0x80>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <HAL_SPI_TransmitReceive+0x80>
 8004104:	887b      	ldrh	r3, [r7, #2]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d103      	bne.n	8004112 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004110:	e1c0      	b.n	8004494 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b04      	cmp	r3, #4
 800411c:	d003      	beq.n	8004126 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2205      	movs	r2, #5
 8004122:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	887a      	ldrh	r2, [r7, #2]
 8004136:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	887a      	ldrh	r2, [r7, #2]
 800413e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	887a      	ldrh	r2, [r7, #2]
 800414c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	887a      	ldrh	r2, [r7, #2]
 8004152:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004168:	d802      	bhi.n	8004170 <HAL_SPI_TransmitReceive+0xe6>
 800416a:	8a3b      	ldrh	r3, [r7, #16]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d908      	bls.n	8004182 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800417e:	605a      	str	r2, [r3, #4]
 8004180:	e007      	b.n	8004192 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004190:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419c:	2b40      	cmp	r3, #64	; 0x40
 800419e:	d007      	beq.n	80041b0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041b8:	d97c      	bls.n	80042b4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <HAL_SPI_TransmitReceive+0x13e>
 80041c2:	8a7b      	ldrh	r3, [r7, #18]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d169      	bne.n	800429c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	881a      	ldrh	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	1c9a      	adds	r2, r3, #2
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041ec:	e056      	b.n	800429c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d11b      	bne.n	8004234 <HAL_SPI_TransmitReceive+0x1aa>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d016      	beq.n	8004234 <HAL_SPI_TransmitReceive+0x1aa>
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	2b01      	cmp	r3, #1
 800420a:	d113      	bne.n	8004234 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	881a      	ldrh	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	1c9a      	adds	r2, r3, #2
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b01      	cmp	r3, #1
 8004240:	d11c      	bne.n	800427c <HAL_SPI_TransmitReceive+0x1f2>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d016      	beq.n	800427c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	b292      	uxth	r2, r2
 800425a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	1c9a      	adds	r2, r3, #2
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004278:	2301      	movs	r3, #1
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800427c:	f7fd fb80 	bl	8001980 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004288:	429a      	cmp	r2, r3
 800428a:	d807      	bhi.n	800429c <HAL_SPI_TransmitReceive+0x212>
 800428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004292:	d003      	beq.n	800429c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800429a:	e0fb      	b.n	8004494 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1a3      	bne.n	80041ee <HAL_SPI_TransmitReceive+0x164>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d19d      	bne.n	80041ee <HAL_SPI_TransmitReceive+0x164>
 80042b2:	e0df      	b.n	8004474 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_SPI_TransmitReceive+0x23a>
 80042bc:	8a7b      	ldrh	r3, [r7, #18]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	f040 80cb 	bne.w	800445a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d912      	bls.n	80042f4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	881a      	ldrh	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042de:	1c9a      	adds	r2, r3, #2
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b02      	subs	r3, #2
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042f2:	e0b2      	b.n	800445a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	7812      	ldrb	r2, [r2, #0]
 8004300:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800431a:	e09e      	b.n	800445a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b02      	cmp	r3, #2
 8004328:	d134      	bne.n	8004394 <HAL_SPI_TransmitReceive+0x30a>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d02f      	beq.n	8004394 <HAL_SPI_TransmitReceive+0x30a>
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	2b01      	cmp	r3, #1
 8004338:	d12c      	bne.n	8004394 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b01      	cmp	r3, #1
 8004342:	d912      	bls.n	800436a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	881a      	ldrh	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	1c9a      	adds	r2, r3, #2
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b02      	subs	r3, #2
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004368:	e012      	b.n	8004390 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	330c      	adds	r3, #12
 8004374:	7812      	ldrb	r2, [r2, #0]
 8004376:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d148      	bne.n	8004434 <HAL_SPI_TransmitReceive+0x3aa>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d042      	beq.n	8004434 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d923      	bls.n	8004402 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	b292      	uxth	r2, r2
 80043c6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	1c9a      	adds	r2, r3, #2
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b02      	subs	r3, #2
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d81f      	bhi.n	8004430 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043fe:	605a      	str	r2, [r3, #4]
 8004400:	e016      	b.n	8004430 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f103 020c 	add.w	r2, r3, #12
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	7812      	ldrb	r2, [r2, #0]
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004424:	b29b      	uxth	r3, r3
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004430:	2301      	movs	r3, #1
 8004432:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004434:	f7fd faa4 	bl	8001980 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004440:	429a      	cmp	r2, r3
 8004442:	d803      	bhi.n	800444c <HAL_SPI_TransmitReceive+0x3c2>
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444a:	d102      	bne.n	8004452 <HAL_SPI_TransmitReceive+0x3c8>
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	2b00      	cmp	r3, #0
 8004450:	d103      	bne.n	800445a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004458:	e01c      	b.n	8004494 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	f47f af5b 	bne.w	800431c <HAL_SPI_TransmitReceive+0x292>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	f47f af54 	bne.w	800431c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004474:	69fa      	ldr	r2, [r7, #28]
 8004476:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f9b3 	bl	80047e4 <SPI_EndRxTxTransaction>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d006      	beq.n	8004492 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2220      	movs	r2, #32
 800448e:	661a      	str	r2, [r3, #96]	; 0x60
 8004490:	e000      	b.n	8004494 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004492:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80044a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3728      	adds	r7, #40	; 0x28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	603b      	str	r3, [r7, #0]
 80044bc:	4613      	mov	r3, r2
 80044be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044c0:	f7fd fa5e 	bl	8001980 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	4413      	add	r3, r2
 80044ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044d0:	f7fd fa56 	bl	8001980 <HAL_GetTick>
 80044d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044d6:	4b39      	ldr	r3, [pc, #228]	; (80045bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	015b      	lsls	r3, r3, #5
 80044dc:	0d1b      	lsrs	r3, r3, #20
 80044de:	69fa      	ldr	r2, [r7, #28]
 80044e0:	fb02 f303 	mul.w	r3, r2, r3
 80044e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044e6:	e054      	b.n	8004592 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ee:	d050      	beq.n	8004592 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044f0:	f7fd fa46 	bl	8001980 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	69fa      	ldr	r2, [r7, #28]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d902      	bls.n	8004506 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d13d      	bne.n	8004582 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004514:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800451e:	d111      	bne.n	8004544 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004528:	d004      	beq.n	8004534 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004532:	d107      	bne.n	8004544 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004542:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800454c:	d10f      	bne.n	800456e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800456c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e017      	b.n	80045b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	3b01      	subs	r3, #1
 8004590:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4013      	ands	r3, r2
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	429a      	cmp	r2, r3
 80045a0:	bf0c      	ite	eq
 80045a2:	2301      	moveq	r3, #1
 80045a4:	2300      	movne	r3, #0
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	461a      	mov	r2, r3
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d19b      	bne.n	80044e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3720      	adds	r7, #32
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000000 	.word	0x20000000

080045c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08a      	sub	sp, #40	; 0x28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80045ce:	2300      	movs	r3, #0
 80045d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80045d2:	f7fd f9d5 	bl	8001980 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	4413      	add	r3, r2
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80045e2:	f7fd f9cd 	bl	8001980 <HAL_GetTick>
 80045e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	330c      	adds	r3, #12
 80045ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80045f0:	4b3d      	ldr	r3, [pc, #244]	; (80046e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	00da      	lsls	r2, r3, #3
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	0d1b      	lsrs	r3, r3, #20
 8004600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004602:	fb02 f303 	mul.w	r3, r2, r3
 8004606:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004608:	e060      	b.n	80046cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004610:	d107      	bne.n	8004622 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d104      	bne.n	8004622 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004620:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004628:	d050      	beq.n	80046cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800462a:	f7fd f9a9 	bl	8001980 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004636:	429a      	cmp	r2, r3
 8004638:	d902      	bls.n	8004640 <SPI_WaitFifoStateUntilTimeout+0x80>
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	2b00      	cmp	r3, #0
 800463e:	d13d      	bne.n	80046bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800464e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004658:	d111      	bne.n	800467e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004662:	d004      	beq.n	800466e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466c:	d107      	bne.n	800467e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800467c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004686:	d10f      	bne.n	80046a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e010      	b.n	80046de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	3b01      	subs	r3, #1
 80046ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	4013      	ands	r3, r2
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d196      	bne.n	800460a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3728      	adds	r7, #40	; 0x28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000000 	.word	0x20000000

080046ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004700:	d111      	bne.n	8004726 <SPI_EndRxTransaction+0x3a>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800470a:	d004      	beq.n	8004716 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004714:	d107      	bne.n	8004726 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004724:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800472e:	d112      	bne.n	8004756 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2200      	movs	r2, #0
 8004738:	2180      	movs	r1, #128	; 0x80
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f7ff feb8 	bl	80044b0 <SPI_WaitFlagStateUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d021      	beq.n	800478a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474a:	f043 0220 	orr.w	r2, r3, #32
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e03d      	b.n	80047d2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004756:	4b21      	ldr	r3, [pc, #132]	; (80047dc <SPI_EndRxTransaction+0xf0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a21      	ldr	r2, [pc, #132]	; (80047e0 <SPI_EndRxTransaction+0xf4>)
 800475c:	fba2 2303 	umull	r2, r3, r2, r3
 8004760:	0d5b      	lsrs	r3, r3, #21
 8004762:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004766:	fb02 f303 	mul.w	r3, r2, r3
 800476a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	3b01      	subs	r3, #1
 8004776:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004782:	2b80      	cmp	r3, #128	; 0x80
 8004784:	d0f2      	beq.n	800476c <SPI_EndRxTransaction+0x80>
 8004786:	e000      	b.n	800478a <SPI_EndRxTransaction+0x9e>
        break;
 8004788:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004792:	d11d      	bne.n	80047d0 <SPI_EndRxTransaction+0xe4>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800479c:	d004      	beq.n	80047a8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a6:	d113      	bne.n	80047d0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f7ff ff03 	bl	80045c0 <SPI_WaitFifoStateUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d007      	beq.n	80047d0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c4:	f043 0220 	orr.w	r2, r3, #32
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e000      	b.n	80047d2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000000 	.word	0x20000000
 80047e0:	165e9f81 	.word	0x165e9f81

080047e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f7ff fedf 	bl	80045c0 <SPI_WaitFifoStateUntilTimeout>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480c:	f043 0220 	orr.w	r2, r3, #32
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e046      	b.n	80048a6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004818:	4b25      	ldr	r3, [pc, #148]	; (80048b0 <SPI_EndRxTxTransaction+0xcc>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a25      	ldr	r2, [pc, #148]	; (80048b4 <SPI_EndRxTxTransaction+0xd0>)
 800481e:	fba2 2303 	umull	r2, r3, r2, r3
 8004822:	0d5b      	lsrs	r3, r3, #21
 8004824:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004828:	fb02 f303 	mul.w	r3, r2, r3
 800482c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004836:	d112      	bne.n	800485e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2200      	movs	r2, #0
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f7ff fe34 	bl	80044b0 <SPI_WaitFlagStateUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d016      	beq.n	800487c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004852:	f043 0220 	orr.w	r2, r3, #32
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e023      	b.n	80048a6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	3b01      	subs	r3, #1
 8004868:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004874:	2b80      	cmp	r3, #128	; 0x80
 8004876:	d0f2      	beq.n	800485e <SPI_EndRxTxTransaction+0x7a>
 8004878:	e000      	b.n	800487c <SPI_EndRxTxTransaction+0x98>
        break;
 800487a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2200      	movs	r2, #0
 8004884:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f7ff fe99 	bl	80045c0 <SPI_WaitFifoStateUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d007      	beq.n	80048a4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004898:	f043 0220 	orr.w	r2, r3, #32
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e000      	b.n	80048a6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000000 	.word	0x20000000
 80048b4:	165e9f81 	.word	0x165e9f81

080048b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e049      	b.n	800495e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d106      	bne.n	80048e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7fc fe2c 	bl	800153c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3304      	adds	r3, #4
 80048f4:	4619      	mov	r1, r3
 80048f6:	4610      	mov	r0, r2
 80048f8:	f000 fa00 	bl	8004cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b01      	cmp	r3, #1
 800497a:	d001      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e054      	b.n	8004a2a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a26      	ldr	r2, [pc, #152]	; (8004a38 <HAL_TIM_Base_Start_IT+0xd0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d022      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0x80>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049aa:	d01d      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0x80>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a22      	ldr	r2, [pc, #136]	; (8004a3c <HAL_TIM_Base_Start_IT+0xd4>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d018      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0x80>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a21      	ldr	r2, [pc, #132]	; (8004a40 <HAL_TIM_Base_Start_IT+0xd8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d013      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0x80>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a1f      	ldr	r2, [pc, #124]	; (8004a44 <HAL_TIM_Base_Start_IT+0xdc>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00e      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0x80>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a1e      	ldr	r2, [pc, #120]	; (8004a48 <HAL_TIM_Base_Start_IT+0xe0>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d009      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0x80>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a1c      	ldr	r2, [pc, #112]	; (8004a4c <HAL_TIM_Base_Start_IT+0xe4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d004      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0x80>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1b      	ldr	r2, [pc, #108]	; (8004a50 <HAL_TIM_Base_Start_IT+0xe8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d115      	bne.n	8004a14 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	4b19      	ldr	r3, [pc, #100]	; (8004a54 <HAL_TIM_Base_Start_IT+0xec>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b06      	cmp	r3, #6
 80049f8:	d015      	beq.n	8004a26 <HAL_TIM_Base_Start_IT+0xbe>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a00:	d011      	beq.n	8004a26 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f042 0201 	orr.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a12:	e008      	b.n	8004a26 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	e000      	b.n	8004a28 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40010000 	.word	0x40010000
 8004a3c:	40000400 	.word	0x40000400
 8004a40:	40000800 	.word	0x40000800
 8004a44:	40000c00 	.word	0x40000c00
 8004a48:	40010400 	.word	0x40010400
 8004a4c:	40014000 	.word	0x40014000
 8004a50:	40001800 	.word	0x40001800
 8004a54:	00010007 	.word	0x00010007

08004a58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d122      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d11b      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0202 	mvn.w	r2, #2
 8004a84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f90f 	bl	8004cbe <HAL_TIM_IC_CaptureCallback>
 8004aa0:	e005      	b.n	8004aae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f901 	bl	8004caa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f912 	bl	8004cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d122      	bne.n	8004b08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d11b      	bne.n	8004b08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f06f 0204 	mvn.w	r2, #4
 8004ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f8e5 	bl	8004cbe <HAL_TIM_IC_CaptureCallback>
 8004af4:	e005      	b.n	8004b02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f8d7 	bl	8004caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f8e8 	bl	8004cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d122      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d11b      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0208 	mvn.w	r2, #8
 8004b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2204      	movs	r2, #4
 8004b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f8bb 	bl	8004cbe <HAL_TIM_IC_CaptureCallback>
 8004b48:	e005      	b.n	8004b56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f8ad 	bl	8004caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f8be 	bl	8004cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0310 	and.w	r3, r3, #16
 8004b66:	2b10      	cmp	r3, #16
 8004b68:	d122      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0310 	and.w	r3, r3, #16
 8004b74:	2b10      	cmp	r3, #16
 8004b76:	d11b      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0210 	mvn.w	r2, #16
 8004b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2208      	movs	r2, #8
 8004b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f891 	bl	8004cbe <HAL_TIM_IC_CaptureCallback>
 8004b9c:	e005      	b.n	8004baa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f883 	bl	8004caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f894 	bl	8004cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d10e      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d107      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0201 	mvn.w	r2, #1
 8004bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f85d 	bl	8004c96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be6:	2b80      	cmp	r3, #128	; 0x80
 8004be8:	d10e      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf4:	2b80      	cmp	r3, #128	; 0x80
 8004bf6:	d107      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f9b2 	bl	8004f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c16:	d10e      	bne.n	8004c36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c22:	2b80      	cmp	r3, #128	; 0x80
 8004c24:	d107      	bne.n	8004c36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f9a5 	bl	8004f80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c40:	2b40      	cmp	r3, #64	; 0x40
 8004c42:	d10e      	bne.n	8004c62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4e:	2b40      	cmp	r3, #64	; 0x40
 8004c50:	d107      	bne.n	8004c62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f842 	bl	8004ce6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b20      	cmp	r3, #32
 8004c6e:	d10e      	bne.n	8004c8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	d107      	bne.n	8004c8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f06f 0220 	mvn.w	r2, #32
 8004c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f965 	bl	8004f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c8e:	bf00      	nop
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
	...

08004cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a40      	ldr	r2, [pc, #256]	; (8004e10 <TIM_Base_SetConfig+0x114>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d013      	beq.n	8004d3c <TIM_Base_SetConfig+0x40>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d1a:	d00f      	beq.n	8004d3c <TIM_Base_SetConfig+0x40>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a3d      	ldr	r2, [pc, #244]	; (8004e14 <TIM_Base_SetConfig+0x118>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00b      	beq.n	8004d3c <TIM_Base_SetConfig+0x40>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a3c      	ldr	r2, [pc, #240]	; (8004e18 <TIM_Base_SetConfig+0x11c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d007      	beq.n	8004d3c <TIM_Base_SetConfig+0x40>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a3b      	ldr	r2, [pc, #236]	; (8004e1c <TIM_Base_SetConfig+0x120>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d003      	beq.n	8004d3c <TIM_Base_SetConfig+0x40>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a3a      	ldr	r2, [pc, #232]	; (8004e20 <TIM_Base_SetConfig+0x124>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d108      	bne.n	8004d4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a2f      	ldr	r2, [pc, #188]	; (8004e10 <TIM_Base_SetConfig+0x114>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d02b      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5c:	d027      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a2c      	ldr	r2, [pc, #176]	; (8004e14 <TIM_Base_SetConfig+0x118>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d023      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a2b      	ldr	r2, [pc, #172]	; (8004e18 <TIM_Base_SetConfig+0x11c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d01f      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a2a      	ldr	r2, [pc, #168]	; (8004e1c <TIM_Base_SetConfig+0x120>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d01b      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a29      	ldr	r2, [pc, #164]	; (8004e20 <TIM_Base_SetConfig+0x124>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d017      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a28      	ldr	r2, [pc, #160]	; (8004e24 <TIM_Base_SetConfig+0x128>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d013      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a27      	ldr	r2, [pc, #156]	; (8004e28 <TIM_Base_SetConfig+0x12c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00f      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a26      	ldr	r2, [pc, #152]	; (8004e2c <TIM_Base_SetConfig+0x130>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00b      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a25      	ldr	r2, [pc, #148]	; (8004e30 <TIM_Base_SetConfig+0x134>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d007      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a24      	ldr	r2, [pc, #144]	; (8004e34 <TIM_Base_SetConfig+0x138>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d003      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a23      	ldr	r2, [pc, #140]	; (8004e38 <TIM_Base_SetConfig+0x13c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d108      	bne.n	8004dc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a0a      	ldr	r2, [pc, #40]	; (8004e10 <TIM_Base_SetConfig+0x114>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d003      	beq.n	8004df4 <TIM_Base_SetConfig+0xf8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a0c      	ldr	r2, [pc, #48]	; (8004e20 <TIM_Base_SetConfig+0x124>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d103      	bne.n	8004dfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	615a      	str	r2, [r3, #20]
}
 8004e02:	bf00      	nop
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40010000 	.word	0x40010000
 8004e14:	40000400 	.word	0x40000400
 8004e18:	40000800 	.word	0x40000800
 8004e1c:	40000c00 	.word	0x40000c00
 8004e20:	40010400 	.word	0x40010400
 8004e24:	40014000 	.word	0x40014000
 8004e28:	40014400 	.word	0x40014400
 8004e2c:	40014800 	.word	0x40014800
 8004e30:	40001800 	.word	0x40001800
 8004e34:	40001c00 	.word	0x40001c00
 8004e38:	40002000 	.word	0x40002000

08004e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e06d      	b.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a30      	ldr	r2, [pc, #192]	; (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d004      	beq.n	8004e88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a2f      	ldr	r2, [pc, #188]	; (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d108      	bne.n	8004e9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a20      	ldr	r2, [pc, #128]	; (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d022      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec6:	d01d      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a1d      	ldr	r2, [pc, #116]	; (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d018      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a1c      	ldr	r2, [pc, #112]	; (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d013      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1a      	ldr	r2, [pc, #104]	; (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00e      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a15      	ldr	r2, [pc, #84]	; (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d009      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a16      	ldr	r2, [pc, #88]	; (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d004      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a15      	ldr	r2, [pc, #84]	; (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d10c      	bne.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	40010000 	.word	0x40010000
 8004f40:	40010400 	.word	0x40010400
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800
 8004f4c:	40000c00 	.word	0x40000c00
 8004f50:	40014000 	.word	0x40014000
 8004f54:	40001800 	.word	0x40001800

08004f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e040      	b.n	8005028 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fc fae6 	bl	8001588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2224      	movs	r2, #36	; 0x24
 8004fc0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0201 	bic.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f8c0 	bl	8005158 <UART_SetConfig>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e022      	b.n	8005028 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fb18 	bl	8005620 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ffe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800500e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fb9f 	bl	8005764 <UART_CheckIdleState>
 8005026:	4603      	mov	r3, r0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08a      	sub	sp, #40	; 0x28
 8005034:	af02      	add	r7, sp, #8
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	4613      	mov	r3, r2
 800503e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005044:	2b20      	cmp	r3, #32
 8005046:	f040 8081 	bne.w	800514c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <HAL_UART_Transmit+0x26>
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e079      	b.n	800514e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_UART_Transmit+0x38>
 8005064:	2302      	movs	r3, #2
 8005066:	e072      	b.n	800514e <HAL_UART_Transmit+0x11e>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2221      	movs	r2, #33	; 0x21
 800507c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800507e:	f7fc fc7f 	bl	8001980 <HAL_GetTick>
 8005082:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	88fa      	ldrh	r2, [r7, #6]
 8005088:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	88fa      	ldrh	r2, [r7, #6]
 8005090:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509c:	d108      	bne.n	80050b0 <HAL_UART_Transmit+0x80>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d104      	bne.n	80050b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	e003      	b.n	80050b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050b4:	2300      	movs	r3, #0
 80050b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80050c0:	e02c      	b.n	800511c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2200      	movs	r2, #0
 80050ca:	2180      	movs	r1, #128	; 0x80
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 fb7c 	bl	80057ca <UART_WaitOnFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e038      	b.n	800514e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10b      	bne.n	80050fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	3302      	adds	r3, #2
 80050f6:	61bb      	str	r3, [r7, #24]
 80050f8:	e007      	b.n	800510a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	781a      	ldrb	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	3301      	adds	r3, #1
 8005108:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1cc      	bne.n	80050c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2200      	movs	r2, #0
 8005130:	2140      	movs	r1, #64	; 0x40
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 fb49 	bl	80057ca <UART_WaitOnFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e005      	b.n	800514e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2220      	movs	r2, #32
 8005146:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	e000      	b.n	800514e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800514c:	2302      	movs	r3, #2
  }
}
 800514e:	4618      	mov	r0, r3
 8005150:	3720      	adds	r7, #32
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b088      	sub	sp, #32
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005160:	2300      	movs	r3, #0
 8005162:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4ba6      	ldr	r3, [pc, #664]	; (800541c <UART_SetConfig+0x2c4>)
 8005184:	4013      	ands	r3, r2
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6812      	ldr	r2, [r2, #0]
 800518a:	6979      	ldr	r1, [r7, #20]
 800518c:	430b      	orrs	r3, r1
 800518e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a94      	ldr	r2, [pc, #592]	; (8005420 <UART_SetConfig+0x2c8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d120      	bne.n	8005216 <UART_SetConfig+0xbe>
 80051d4:	4b93      	ldr	r3, [pc, #588]	; (8005424 <UART_SetConfig+0x2cc>)
 80051d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	2b03      	cmp	r3, #3
 80051e0:	d816      	bhi.n	8005210 <UART_SetConfig+0xb8>
 80051e2:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <UART_SetConfig+0x90>)
 80051e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e8:	080051f9 	.word	0x080051f9
 80051ec:	08005205 	.word	0x08005205
 80051f0:	080051ff 	.word	0x080051ff
 80051f4:	0800520b 	.word	0x0800520b
 80051f8:	2301      	movs	r3, #1
 80051fa:	77fb      	strb	r3, [r7, #31]
 80051fc:	e150      	b.n	80054a0 <UART_SetConfig+0x348>
 80051fe:	2302      	movs	r3, #2
 8005200:	77fb      	strb	r3, [r7, #31]
 8005202:	e14d      	b.n	80054a0 <UART_SetConfig+0x348>
 8005204:	2304      	movs	r3, #4
 8005206:	77fb      	strb	r3, [r7, #31]
 8005208:	e14a      	b.n	80054a0 <UART_SetConfig+0x348>
 800520a:	2308      	movs	r3, #8
 800520c:	77fb      	strb	r3, [r7, #31]
 800520e:	e147      	b.n	80054a0 <UART_SetConfig+0x348>
 8005210:	2310      	movs	r3, #16
 8005212:	77fb      	strb	r3, [r7, #31]
 8005214:	e144      	b.n	80054a0 <UART_SetConfig+0x348>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a83      	ldr	r2, [pc, #524]	; (8005428 <UART_SetConfig+0x2d0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d132      	bne.n	8005286 <UART_SetConfig+0x12e>
 8005220:	4b80      	ldr	r3, [pc, #512]	; (8005424 <UART_SetConfig+0x2cc>)
 8005222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005226:	f003 030c 	and.w	r3, r3, #12
 800522a:	2b0c      	cmp	r3, #12
 800522c:	d828      	bhi.n	8005280 <UART_SetConfig+0x128>
 800522e:	a201      	add	r2, pc, #4	; (adr r2, 8005234 <UART_SetConfig+0xdc>)
 8005230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005234:	08005269 	.word	0x08005269
 8005238:	08005281 	.word	0x08005281
 800523c:	08005281 	.word	0x08005281
 8005240:	08005281 	.word	0x08005281
 8005244:	08005275 	.word	0x08005275
 8005248:	08005281 	.word	0x08005281
 800524c:	08005281 	.word	0x08005281
 8005250:	08005281 	.word	0x08005281
 8005254:	0800526f 	.word	0x0800526f
 8005258:	08005281 	.word	0x08005281
 800525c:	08005281 	.word	0x08005281
 8005260:	08005281 	.word	0x08005281
 8005264:	0800527b 	.word	0x0800527b
 8005268:	2300      	movs	r3, #0
 800526a:	77fb      	strb	r3, [r7, #31]
 800526c:	e118      	b.n	80054a0 <UART_SetConfig+0x348>
 800526e:	2302      	movs	r3, #2
 8005270:	77fb      	strb	r3, [r7, #31]
 8005272:	e115      	b.n	80054a0 <UART_SetConfig+0x348>
 8005274:	2304      	movs	r3, #4
 8005276:	77fb      	strb	r3, [r7, #31]
 8005278:	e112      	b.n	80054a0 <UART_SetConfig+0x348>
 800527a:	2308      	movs	r3, #8
 800527c:	77fb      	strb	r3, [r7, #31]
 800527e:	e10f      	b.n	80054a0 <UART_SetConfig+0x348>
 8005280:	2310      	movs	r3, #16
 8005282:	77fb      	strb	r3, [r7, #31]
 8005284:	e10c      	b.n	80054a0 <UART_SetConfig+0x348>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a68      	ldr	r2, [pc, #416]	; (800542c <UART_SetConfig+0x2d4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d120      	bne.n	80052d2 <UART_SetConfig+0x17a>
 8005290:	4b64      	ldr	r3, [pc, #400]	; (8005424 <UART_SetConfig+0x2cc>)
 8005292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005296:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800529a:	2b30      	cmp	r3, #48	; 0x30
 800529c:	d013      	beq.n	80052c6 <UART_SetConfig+0x16e>
 800529e:	2b30      	cmp	r3, #48	; 0x30
 80052a0:	d814      	bhi.n	80052cc <UART_SetConfig+0x174>
 80052a2:	2b20      	cmp	r3, #32
 80052a4:	d009      	beq.n	80052ba <UART_SetConfig+0x162>
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	d810      	bhi.n	80052cc <UART_SetConfig+0x174>
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <UART_SetConfig+0x15c>
 80052ae:	2b10      	cmp	r3, #16
 80052b0:	d006      	beq.n	80052c0 <UART_SetConfig+0x168>
 80052b2:	e00b      	b.n	80052cc <UART_SetConfig+0x174>
 80052b4:	2300      	movs	r3, #0
 80052b6:	77fb      	strb	r3, [r7, #31]
 80052b8:	e0f2      	b.n	80054a0 <UART_SetConfig+0x348>
 80052ba:	2302      	movs	r3, #2
 80052bc:	77fb      	strb	r3, [r7, #31]
 80052be:	e0ef      	b.n	80054a0 <UART_SetConfig+0x348>
 80052c0:	2304      	movs	r3, #4
 80052c2:	77fb      	strb	r3, [r7, #31]
 80052c4:	e0ec      	b.n	80054a0 <UART_SetConfig+0x348>
 80052c6:	2308      	movs	r3, #8
 80052c8:	77fb      	strb	r3, [r7, #31]
 80052ca:	e0e9      	b.n	80054a0 <UART_SetConfig+0x348>
 80052cc:	2310      	movs	r3, #16
 80052ce:	77fb      	strb	r3, [r7, #31]
 80052d0:	e0e6      	b.n	80054a0 <UART_SetConfig+0x348>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a56      	ldr	r2, [pc, #344]	; (8005430 <UART_SetConfig+0x2d8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d120      	bne.n	800531e <UART_SetConfig+0x1c6>
 80052dc:	4b51      	ldr	r3, [pc, #324]	; (8005424 <UART_SetConfig+0x2cc>)
 80052de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052e6:	2bc0      	cmp	r3, #192	; 0xc0
 80052e8:	d013      	beq.n	8005312 <UART_SetConfig+0x1ba>
 80052ea:	2bc0      	cmp	r3, #192	; 0xc0
 80052ec:	d814      	bhi.n	8005318 <UART_SetConfig+0x1c0>
 80052ee:	2b80      	cmp	r3, #128	; 0x80
 80052f0:	d009      	beq.n	8005306 <UART_SetConfig+0x1ae>
 80052f2:	2b80      	cmp	r3, #128	; 0x80
 80052f4:	d810      	bhi.n	8005318 <UART_SetConfig+0x1c0>
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <UART_SetConfig+0x1a8>
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	d006      	beq.n	800530c <UART_SetConfig+0x1b4>
 80052fe:	e00b      	b.n	8005318 <UART_SetConfig+0x1c0>
 8005300:	2300      	movs	r3, #0
 8005302:	77fb      	strb	r3, [r7, #31]
 8005304:	e0cc      	b.n	80054a0 <UART_SetConfig+0x348>
 8005306:	2302      	movs	r3, #2
 8005308:	77fb      	strb	r3, [r7, #31]
 800530a:	e0c9      	b.n	80054a0 <UART_SetConfig+0x348>
 800530c:	2304      	movs	r3, #4
 800530e:	77fb      	strb	r3, [r7, #31]
 8005310:	e0c6      	b.n	80054a0 <UART_SetConfig+0x348>
 8005312:	2308      	movs	r3, #8
 8005314:	77fb      	strb	r3, [r7, #31]
 8005316:	e0c3      	b.n	80054a0 <UART_SetConfig+0x348>
 8005318:	2310      	movs	r3, #16
 800531a:	77fb      	strb	r3, [r7, #31]
 800531c:	e0c0      	b.n	80054a0 <UART_SetConfig+0x348>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a44      	ldr	r2, [pc, #272]	; (8005434 <UART_SetConfig+0x2dc>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d125      	bne.n	8005374 <UART_SetConfig+0x21c>
 8005328:	4b3e      	ldr	r3, [pc, #248]	; (8005424 <UART_SetConfig+0x2cc>)
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005332:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005336:	d017      	beq.n	8005368 <UART_SetConfig+0x210>
 8005338:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800533c:	d817      	bhi.n	800536e <UART_SetConfig+0x216>
 800533e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005342:	d00b      	beq.n	800535c <UART_SetConfig+0x204>
 8005344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005348:	d811      	bhi.n	800536e <UART_SetConfig+0x216>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <UART_SetConfig+0x1fe>
 800534e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005352:	d006      	beq.n	8005362 <UART_SetConfig+0x20a>
 8005354:	e00b      	b.n	800536e <UART_SetConfig+0x216>
 8005356:	2300      	movs	r3, #0
 8005358:	77fb      	strb	r3, [r7, #31]
 800535a:	e0a1      	b.n	80054a0 <UART_SetConfig+0x348>
 800535c:	2302      	movs	r3, #2
 800535e:	77fb      	strb	r3, [r7, #31]
 8005360:	e09e      	b.n	80054a0 <UART_SetConfig+0x348>
 8005362:	2304      	movs	r3, #4
 8005364:	77fb      	strb	r3, [r7, #31]
 8005366:	e09b      	b.n	80054a0 <UART_SetConfig+0x348>
 8005368:	2308      	movs	r3, #8
 800536a:	77fb      	strb	r3, [r7, #31]
 800536c:	e098      	b.n	80054a0 <UART_SetConfig+0x348>
 800536e:	2310      	movs	r3, #16
 8005370:	77fb      	strb	r3, [r7, #31]
 8005372:	e095      	b.n	80054a0 <UART_SetConfig+0x348>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a2f      	ldr	r2, [pc, #188]	; (8005438 <UART_SetConfig+0x2e0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d125      	bne.n	80053ca <UART_SetConfig+0x272>
 800537e:	4b29      	ldr	r3, [pc, #164]	; (8005424 <UART_SetConfig+0x2cc>)
 8005380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005384:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005388:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800538c:	d017      	beq.n	80053be <UART_SetConfig+0x266>
 800538e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005392:	d817      	bhi.n	80053c4 <UART_SetConfig+0x26c>
 8005394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005398:	d00b      	beq.n	80053b2 <UART_SetConfig+0x25a>
 800539a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800539e:	d811      	bhi.n	80053c4 <UART_SetConfig+0x26c>
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <UART_SetConfig+0x254>
 80053a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a8:	d006      	beq.n	80053b8 <UART_SetConfig+0x260>
 80053aa:	e00b      	b.n	80053c4 <UART_SetConfig+0x26c>
 80053ac:	2301      	movs	r3, #1
 80053ae:	77fb      	strb	r3, [r7, #31]
 80053b0:	e076      	b.n	80054a0 <UART_SetConfig+0x348>
 80053b2:	2302      	movs	r3, #2
 80053b4:	77fb      	strb	r3, [r7, #31]
 80053b6:	e073      	b.n	80054a0 <UART_SetConfig+0x348>
 80053b8:	2304      	movs	r3, #4
 80053ba:	77fb      	strb	r3, [r7, #31]
 80053bc:	e070      	b.n	80054a0 <UART_SetConfig+0x348>
 80053be:	2308      	movs	r3, #8
 80053c0:	77fb      	strb	r3, [r7, #31]
 80053c2:	e06d      	b.n	80054a0 <UART_SetConfig+0x348>
 80053c4:	2310      	movs	r3, #16
 80053c6:	77fb      	strb	r3, [r7, #31]
 80053c8:	e06a      	b.n	80054a0 <UART_SetConfig+0x348>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1b      	ldr	r2, [pc, #108]	; (800543c <UART_SetConfig+0x2e4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d138      	bne.n	8005446 <UART_SetConfig+0x2ee>
 80053d4:	4b13      	ldr	r3, [pc, #76]	; (8005424 <UART_SetConfig+0x2cc>)
 80053d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80053de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053e2:	d017      	beq.n	8005414 <UART_SetConfig+0x2bc>
 80053e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053e8:	d82a      	bhi.n	8005440 <UART_SetConfig+0x2e8>
 80053ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ee:	d00b      	beq.n	8005408 <UART_SetConfig+0x2b0>
 80053f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053f4:	d824      	bhi.n	8005440 <UART_SetConfig+0x2e8>
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <UART_SetConfig+0x2aa>
 80053fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fe:	d006      	beq.n	800540e <UART_SetConfig+0x2b6>
 8005400:	e01e      	b.n	8005440 <UART_SetConfig+0x2e8>
 8005402:	2300      	movs	r3, #0
 8005404:	77fb      	strb	r3, [r7, #31]
 8005406:	e04b      	b.n	80054a0 <UART_SetConfig+0x348>
 8005408:	2302      	movs	r3, #2
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e048      	b.n	80054a0 <UART_SetConfig+0x348>
 800540e:	2304      	movs	r3, #4
 8005410:	77fb      	strb	r3, [r7, #31]
 8005412:	e045      	b.n	80054a0 <UART_SetConfig+0x348>
 8005414:	2308      	movs	r3, #8
 8005416:	77fb      	strb	r3, [r7, #31]
 8005418:	e042      	b.n	80054a0 <UART_SetConfig+0x348>
 800541a:	bf00      	nop
 800541c:	efff69f3 	.word	0xefff69f3
 8005420:	40011000 	.word	0x40011000
 8005424:	40023800 	.word	0x40023800
 8005428:	40004400 	.word	0x40004400
 800542c:	40004800 	.word	0x40004800
 8005430:	40004c00 	.word	0x40004c00
 8005434:	40005000 	.word	0x40005000
 8005438:	40011400 	.word	0x40011400
 800543c:	40007800 	.word	0x40007800
 8005440:	2310      	movs	r3, #16
 8005442:	77fb      	strb	r3, [r7, #31]
 8005444:	e02c      	b.n	80054a0 <UART_SetConfig+0x348>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a72      	ldr	r2, [pc, #456]	; (8005614 <UART_SetConfig+0x4bc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d125      	bne.n	800549c <UART_SetConfig+0x344>
 8005450:	4b71      	ldr	r3, [pc, #452]	; (8005618 <UART_SetConfig+0x4c0>)
 8005452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005456:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800545a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800545e:	d017      	beq.n	8005490 <UART_SetConfig+0x338>
 8005460:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005464:	d817      	bhi.n	8005496 <UART_SetConfig+0x33e>
 8005466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800546a:	d00b      	beq.n	8005484 <UART_SetConfig+0x32c>
 800546c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005470:	d811      	bhi.n	8005496 <UART_SetConfig+0x33e>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <UART_SetConfig+0x326>
 8005476:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800547a:	d006      	beq.n	800548a <UART_SetConfig+0x332>
 800547c:	e00b      	b.n	8005496 <UART_SetConfig+0x33e>
 800547e:	2300      	movs	r3, #0
 8005480:	77fb      	strb	r3, [r7, #31]
 8005482:	e00d      	b.n	80054a0 <UART_SetConfig+0x348>
 8005484:	2302      	movs	r3, #2
 8005486:	77fb      	strb	r3, [r7, #31]
 8005488:	e00a      	b.n	80054a0 <UART_SetConfig+0x348>
 800548a:	2304      	movs	r3, #4
 800548c:	77fb      	strb	r3, [r7, #31]
 800548e:	e007      	b.n	80054a0 <UART_SetConfig+0x348>
 8005490:	2308      	movs	r3, #8
 8005492:	77fb      	strb	r3, [r7, #31]
 8005494:	e004      	b.n	80054a0 <UART_SetConfig+0x348>
 8005496:	2310      	movs	r3, #16
 8005498:	77fb      	strb	r3, [r7, #31]
 800549a:	e001      	b.n	80054a0 <UART_SetConfig+0x348>
 800549c:	2310      	movs	r3, #16
 800549e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a8:	d15b      	bne.n	8005562 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80054aa:	7ffb      	ldrb	r3, [r7, #31]
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d828      	bhi.n	8005502 <UART_SetConfig+0x3aa>
 80054b0:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <UART_SetConfig+0x360>)
 80054b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b6:	bf00      	nop
 80054b8:	080054dd 	.word	0x080054dd
 80054bc:	080054e5 	.word	0x080054e5
 80054c0:	080054ed 	.word	0x080054ed
 80054c4:	08005503 	.word	0x08005503
 80054c8:	080054f3 	.word	0x080054f3
 80054cc:	08005503 	.word	0x08005503
 80054d0:	08005503 	.word	0x08005503
 80054d4:	08005503 	.word	0x08005503
 80054d8:	080054fb 	.word	0x080054fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054dc:	f7fd fe74 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 80054e0:	61b8      	str	r0, [r7, #24]
        break;
 80054e2:	e013      	b.n	800550c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054e4:	f7fd fe84 	bl	80031f0 <HAL_RCC_GetPCLK2Freq>
 80054e8:	61b8      	str	r0, [r7, #24]
        break;
 80054ea:	e00f      	b.n	800550c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054ec:	4b4b      	ldr	r3, [pc, #300]	; (800561c <UART_SetConfig+0x4c4>)
 80054ee:	61bb      	str	r3, [r7, #24]
        break;
 80054f0:	e00c      	b.n	800550c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054f2:	f7fd fd97 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 80054f6:	61b8      	str	r0, [r7, #24]
        break;
 80054f8:	e008      	b.n	800550c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054fe:	61bb      	str	r3, [r7, #24]
        break;
 8005500:	e004      	b.n	800550c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	77bb      	strb	r3, [r7, #30]
        break;
 800550a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d074      	beq.n	80055fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	005a      	lsls	r2, r3, #1
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	085b      	lsrs	r3, r3, #1
 800551c:	441a      	add	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	fbb2 f3f3 	udiv	r3, r2, r3
 8005526:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	2b0f      	cmp	r3, #15
 800552c:	d916      	bls.n	800555c <UART_SetConfig+0x404>
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005534:	d212      	bcs.n	800555c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	b29b      	uxth	r3, r3
 800553a:	f023 030f 	bic.w	r3, r3, #15
 800553e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	085b      	lsrs	r3, r3, #1
 8005544:	b29b      	uxth	r3, r3
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	b29a      	uxth	r2, r3
 800554c:	89fb      	ldrh	r3, [r7, #14]
 800554e:	4313      	orrs	r3, r2
 8005550:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	89fa      	ldrh	r2, [r7, #14]
 8005558:	60da      	str	r2, [r3, #12]
 800555a:	e04f      	b.n	80055fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	77bb      	strb	r3, [r7, #30]
 8005560:	e04c      	b.n	80055fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005562:	7ffb      	ldrb	r3, [r7, #31]
 8005564:	2b08      	cmp	r3, #8
 8005566:	d828      	bhi.n	80055ba <UART_SetConfig+0x462>
 8005568:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <UART_SetConfig+0x418>)
 800556a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556e:	bf00      	nop
 8005570:	08005595 	.word	0x08005595
 8005574:	0800559d 	.word	0x0800559d
 8005578:	080055a5 	.word	0x080055a5
 800557c:	080055bb 	.word	0x080055bb
 8005580:	080055ab 	.word	0x080055ab
 8005584:	080055bb 	.word	0x080055bb
 8005588:	080055bb 	.word	0x080055bb
 800558c:	080055bb 	.word	0x080055bb
 8005590:	080055b3 	.word	0x080055b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005594:	f7fd fe18 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 8005598:	61b8      	str	r0, [r7, #24]
        break;
 800559a:	e013      	b.n	80055c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800559c:	f7fd fe28 	bl	80031f0 <HAL_RCC_GetPCLK2Freq>
 80055a0:	61b8      	str	r0, [r7, #24]
        break;
 80055a2:	e00f      	b.n	80055c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055a4:	4b1d      	ldr	r3, [pc, #116]	; (800561c <UART_SetConfig+0x4c4>)
 80055a6:	61bb      	str	r3, [r7, #24]
        break;
 80055a8:	e00c      	b.n	80055c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055aa:	f7fd fd3b 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 80055ae:	61b8      	str	r0, [r7, #24]
        break;
 80055b0:	e008      	b.n	80055c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055b6:	61bb      	str	r3, [r7, #24]
        break;
 80055b8:	e004      	b.n	80055c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	77bb      	strb	r3, [r7, #30]
        break;
 80055c2:	bf00      	nop
    }

    if (pclk != 0U)
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d018      	beq.n	80055fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	085a      	lsrs	r2, r3, #1
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	441a      	add	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2b0f      	cmp	r3, #15
 80055e2:	d909      	bls.n	80055f8 <UART_SetConfig+0x4a0>
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ea:	d205      	bcs.n	80055f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60da      	str	r2, [r3, #12]
 80055f6:	e001      	b.n	80055fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005608:	7fbb      	ldrb	r3, [r7, #30]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3720      	adds	r7, #32
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	40007c00 	.word	0x40007c00
 8005618:	40023800 	.word	0x40023800
 800561c:	00f42400 	.word	0x00f42400

08005620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	f003 0310 	and.w	r3, r3, #16
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01a      	beq.n	8005736 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800571e:	d10a      	bne.n	8005736 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	605a      	str	r2, [r3, #4]
  }
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af02      	add	r7, sp, #8
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005774:	f7fc f904 	bl	8001980 <HAL_GetTick>
 8005778:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b08      	cmp	r3, #8
 8005786:	d10e      	bne.n	80057a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005788:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f817 	bl	80057ca <UART_WaitOnFlagUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e00d      	b.n	80057c2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2220      	movs	r2, #32
 80057b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b09c      	sub	sp, #112	; 0x70
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	603b      	str	r3, [r7, #0]
 80057d6:	4613      	mov	r3, r2
 80057d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057da:	e0a5      	b.n	8005928 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e2:	f000 80a1 	beq.w	8005928 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e6:	f7fc f8cb 	bl	8001980 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d302      	bcc.n	80057fc <UART_WaitOnFlagUntilTimeout+0x32>
 80057f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d13e      	bne.n	800587a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800580a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800580c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005810:	667b      	str	r3, [r7, #100]	; 0x64
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800581a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800581c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005820:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1e6      	bne.n	80057fc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3308      	adds	r3, #8
 8005834:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	f023 0301 	bic.w	r3, r3, #1
 8005844:	663b      	str	r3, [r7, #96]	; 0x60
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3308      	adds	r3, #8
 800584c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800584e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005850:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800585c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e5      	bne.n	800582e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2220      	movs	r2, #32
 8005866:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e067      	b.n	800594a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d04f      	beq.n	8005928 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005896:	d147      	bne.n	8005928 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c0:	637b      	str	r3, [r7, #52]	; 0x34
 80058c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058c8:	e841 2300 	strex	r3, r2, [r1]
 80058cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e6      	bne.n	80058a2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3308      	adds	r3, #8
 80058da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	e853 3f00 	ldrex	r3, [r3]
 80058e2:	613b      	str	r3, [r7, #16]
   return(result);
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f023 0301 	bic.w	r3, r3, #1
 80058ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3308      	adds	r3, #8
 80058f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058f4:	623a      	str	r2, [r7, #32]
 80058f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f8:	69f9      	ldr	r1, [r7, #28]
 80058fa:	6a3a      	ldr	r2, [r7, #32]
 80058fc:	e841 2300 	strex	r3, r2, [r1]
 8005900:	61bb      	str	r3, [r7, #24]
   return(result);
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e5      	bne.n	80058d4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2220      	movs	r2, #32
 800590c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2220      	movs	r2, #32
 8005912:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e010      	b.n	800594a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	69da      	ldr	r2, [r3, #28]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	4013      	ands	r3, r2
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	429a      	cmp	r2, r3
 8005936:	bf0c      	ite	eq
 8005938:	2301      	moveq	r3, #1
 800593a:	2300      	movne	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	461a      	mov	r2, r3
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	429a      	cmp	r2, r3
 8005944:	f43f af4a 	beq.w	80057dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3770      	adds	r7, #112	; 0x70
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <__errno>:
 8005954:	4b01      	ldr	r3, [pc, #4]	; (800595c <__errno+0x8>)
 8005956:	6818      	ldr	r0, [r3, #0]
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	2000000c 	.word	0x2000000c

08005960 <__libc_init_array>:
 8005960:	b570      	push	{r4, r5, r6, lr}
 8005962:	4d0d      	ldr	r5, [pc, #52]	; (8005998 <__libc_init_array+0x38>)
 8005964:	4c0d      	ldr	r4, [pc, #52]	; (800599c <__libc_init_array+0x3c>)
 8005966:	1b64      	subs	r4, r4, r5
 8005968:	10a4      	asrs	r4, r4, #2
 800596a:	2600      	movs	r6, #0
 800596c:	42a6      	cmp	r6, r4
 800596e:	d109      	bne.n	8005984 <__libc_init_array+0x24>
 8005970:	4d0b      	ldr	r5, [pc, #44]	; (80059a0 <__libc_init_array+0x40>)
 8005972:	4c0c      	ldr	r4, [pc, #48]	; (80059a4 <__libc_init_array+0x44>)
 8005974:	f000 fc8e 	bl	8006294 <_init>
 8005978:	1b64      	subs	r4, r4, r5
 800597a:	10a4      	asrs	r4, r4, #2
 800597c:	2600      	movs	r6, #0
 800597e:	42a6      	cmp	r6, r4
 8005980:	d105      	bne.n	800598e <__libc_init_array+0x2e>
 8005982:	bd70      	pop	{r4, r5, r6, pc}
 8005984:	f855 3b04 	ldr.w	r3, [r5], #4
 8005988:	4798      	blx	r3
 800598a:	3601      	adds	r6, #1
 800598c:	e7ee      	b.n	800596c <__libc_init_array+0xc>
 800598e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005992:	4798      	blx	r3
 8005994:	3601      	adds	r6, #1
 8005996:	e7f2      	b.n	800597e <__libc_init_array+0x1e>
 8005998:	0800633c 	.word	0x0800633c
 800599c:	0800633c 	.word	0x0800633c
 80059a0:	0800633c 	.word	0x0800633c
 80059a4:	08006340 	.word	0x08006340

080059a8 <memset>:
 80059a8:	4402      	add	r2, r0
 80059aa:	4603      	mov	r3, r0
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d100      	bne.n	80059b2 <memset+0xa>
 80059b0:	4770      	bx	lr
 80059b2:	f803 1b01 	strb.w	r1, [r3], #1
 80059b6:	e7f9      	b.n	80059ac <memset+0x4>

080059b8 <siprintf>:
 80059b8:	b40e      	push	{r1, r2, r3}
 80059ba:	b500      	push	{lr}
 80059bc:	b09c      	sub	sp, #112	; 0x70
 80059be:	ab1d      	add	r3, sp, #116	; 0x74
 80059c0:	9002      	str	r0, [sp, #8]
 80059c2:	9006      	str	r0, [sp, #24]
 80059c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80059c8:	4809      	ldr	r0, [pc, #36]	; (80059f0 <siprintf+0x38>)
 80059ca:	9107      	str	r1, [sp, #28]
 80059cc:	9104      	str	r1, [sp, #16]
 80059ce:	4909      	ldr	r1, [pc, #36]	; (80059f4 <siprintf+0x3c>)
 80059d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80059d4:	9105      	str	r1, [sp, #20]
 80059d6:	6800      	ldr	r0, [r0, #0]
 80059d8:	9301      	str	r3, [sp, #4]
 80059da:	a902      	add	r1, sp, #8
 80059dc:	f000 f868 	bl	8005ab0 <_svfiprintf_r>
 80059e0:	9b02      	ldr	r3, [sp, #8]
 80059e2:	2200      	movs	r2, #0
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	b01c      	add	sp, #112	; 0x70
 80059e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80059ec:	b003      	add	sp, #12
 80059ee:	4770      	bx	lr
 80059f0:	2000000c 	.word	0x2000000c
 80059f4:	ffff0208 	.word	0xffff0208

080059f8 <__ssputs_r>:
 80059f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059fc:	688e      	ldr	r6, [r1, #8]
 80059fe:	429e      	cmp	r6, r3
 8005a00:	4682      	mov	sl, r0
 8005a02:	460c      	mov	r4, r1
 8005a04:	4690      	mov	r8, r2
 8005a06:	461f      	mov	r7, r3
 8005a08:	d838      	bhi.n	8005a7c <__ssputs_r+0x84>
 8005a0a:	898a      	ldrh	r2, [r1, #12]
 8005a0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a10:	d032      	beq.n	8005a78 <__ssputs_r+0x80>
 8005a12:	6825      	ldr	r5, [r4, #0]
 8005a14:	6909      	ldr	r1, [r1, #16]
 8005a16:	eba5 0901 	sub.w	r9, r5, r1
 8005a1a:	6965      	ldr	r5, [r4, #20]
 8005a1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a24:	3301      	adds	r3, #1
 8005a26:	444b      	add	r3, r9
 8005a28:	106d      	asrs	r5, r5, #1
 8005a2a:	429d      	cmp	r5, r3
 8005a2c:	bf38      	it	cc
 8005a2e:	461d      	movcc	r5, r3
 8005a30:	0553      	lsls	r3, r2, #21
 8005a32:	d531      	bpl.n	8005a98 <__ssputs_r+0xa0>
 8005a34:	4629      	mov	r1, r5
 8005a36:	f000 fb63 	bl	8006100 <_malloc_r>
 8005a3a:	4606      	mov	r6, r0
 8005a3c:	b950      	cbnz	r0, 8005a54 <__ssputs_r+0x5c>
 8005a3e:	230c      	movs	r3, #12
 8005a40:	f8ca 3000 	str.w	r3, [sl]
 8005a44:	89a3      	ldrh	r3, [r4, #12]
 8005a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a4a:	81a3      	strh	r3, [r4, #12]
 8005a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a54:	6921      	ldr	r1, [r4, #16]
 8005a56:	464a      	mov	r2, r9
 8005a58:	f000 fabe 	bl	8005fd8 <memcpy>
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a66:	81a3      	strh	r3, [r4, #12]
 8005a68:	6126      	str	r6, [r4, #16]
 8005a6a:	6165      	str	r5, [r4, #20]
 8005a6c:	444e      	add	r6, r9
 8005a6e:	eba5 0509 	sub.w	r5, r5, r9
 8005a72:	6026      	str	r6, [r4, #0]
 8005a74:	60a5      	str	r5, [r4, #8]
 8005a76:	463e      	mov	r6, r7
 8005a78:	42be      	cmp	r6, r7
 8005a7a:	d900      	bls.n	8005a7e <__ssputs_r+0x86>
 8005a7c:	463e      	mov	r6, r7
 8005a7e:	6820      	ldr	r0, [r4, #0]
 8005a80:	4632      	mov	r2, r6
 8005a82:	4641      	mov	r1, r8
 8005a84:	f000 fab6 	bl	8005ff4 <memmove>
 8005a88:	68a3      	ldr	r3, [r4, #8]
 8005a8a:	1b9b      	subs	r3, r3, r6
 8005a8c:	60a3      	str	r3, [r4, #8]
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	4433      	add	r3, r6
 8005a92:	6023      	str	r3, [r4, #0]
 8005a94:	2000      	movs	r0, #0
 8005a96:	e7db      	b.n	8005a50 <__ssputs_r+0x58>
 8005a98:	462a      	mov	r2, r5
 8005a9a:	f000 fba5 	bl	80061e8 <_realloc_r>
 8005a9e:	4606      	mov	r6, r0
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d1e1      	bne.n	8005a68 <__ssputs_r+0x70>
 8005aa4:	6921      	ldr	r1, [r4, #16]
 8005aa6:	4650      	mov	r0, sl
 8005aa8:	f000 fabe 	bl	8006028 <_free_r>
 8005aac:	e7c7      	b.n	8005a3e <__ssputs_r+0x46>
	...

08005ab0 <_svfiprintf_r>:
 8005ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab4:	4698      	mov	r8, r3
 8005ab6:	898b      	ldrh	r3, [r1, #12]
 8005ab8:	061b      	lsls	r3, r3, #24
 8005aba:	b09d      	sub	sp, #116	; 0x74
 8005abc:	4607      	mov	r7, r0
 8005abe:	460d      	mov	r5, r1
 8005ac0:	4614      	mov	r4, r2
 8005ac2:	d50e      	bpl.n	8005ae2 <_svfiprintf_r+0x32>
 8005ac4:	690b      	ldr	r3, [r1, #16]
 8005ac6:	b963      	cbnz	r3, 8005ae2 <_svfiprintf_r+0x32>
 8005ac8:	2140      	movs	r1, #64	; 0x40
 8005aca:	f000 fb19 	bl	8006100 <_malloc_r>
 8005ace:	6028      	str	r0, [r5, #0]
 8005ad0:	6128      	str	r0, [r5, #16]
 8005ad2:	b920      	cbnz	r0, 8005ade <_svfiprintf_r+0x2e>
 8005ad4:	230c      	movs	r3, #12
 8005ad6:	603b      	str	r3, [r7, #0]
 8005ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8005adc:	e0d1      	b.n	8005c82 <_svfiprintf_r+0x1d2>
 8005ade:	2340      	movs	r3, #64	; 0x40
 8005ae0:	616b      	str	r3, [r5, #20]
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ae6:	2320      	movs	r3, #32
 8005ae8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005aec:	f8cd 800c 	str.w	r8, [sp, #12]
 8005af0:	2330      	movs	r3, #48	; 0x30
 8005af2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005c9c <_svfiprintf_r+0x1ec>
 8005af6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005afa:	f04f 0901 	mov.w	r9, #1
 8005afe:	4623      	mov	r3, r4
 8005b00:	469a      	mov	sl, r3
 8005b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b06:	b10a      	cbz	r2, 8005b0c <_svfiprintf_r+0x5c>
 8005b08:	2a25      	cmp	r2, #37	; 0x25
 8005b0a:	d1f9      	bne.n	8005b00 <_svfiprintf_r+0x50>
 8005b0c:	ebba 0b04 	subs.w	fp, sl, r4
 8005b10:	d00b      	beq.n	8005b2a <_svfiprintf_r+0x7a>
 8005b12:	465b      	mov	r3, fp
 8005b14:	4622      	mov	r2, r4
 8005b16:	4629      	mov	r1, r5
 8005b18:	4638      	mov	r0, r7
 8005b1a:	f7ff ff6d 	bl	80059f8 <__ssputs_r>
 8005b1e:	3001      	adds	r0, #1
 8005b20:	f000 80aa 	beq.w	8005c78 <_svfiprintf_r+0x1c8>
 8005b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b26:	445a      	add	r2, fp
 8005b28:	9209      	str	r2, [sp, #36]	; 0x24
 8005b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 80a2 	beq.w	8005c78 <_svfiprintf_r+0x1c8>
 8005b34:	2300      	movs	r3, #0
 8005b36:	f04f 32ff 	mov.w	r2, #4294967295
 8005b3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b3e:	f10a 0a01 	add.w	sl, sl, #1
 8005b42:	9304      	str	r3, [sp, #16]
 8005b44:	9307      	str	r3, [sp, #28]
 8005b46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b4a:	931a      	str	r3, [sp, #104]	; 0x68
 8005b4c:	4654      	mov	r4, sl
 8005b4e:	2205      	movs	r2, #5
 8005b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b54:	4851      	ldr	r0, [pc, #324]	; (8005c9c <_svfiprintf_r+0x1ec>)
 8005b56:	f7fa fb5b 	bl	8000210 <memchr>
 8005b5a:	9a04      	ldr	r2, [sp, #16]
 8005b5c:	b9d8      	cbnz	r0, 8005b96 <_svfiprintf_r+0xe6>
 8005b5e:	06d0      	lsls	r0, r2, #27
 8005b60:	bf44      	itt	mi
 8005b62:	2320      	movmi	r3, #32
 8005b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b68:	0711      	lsls	r1, r2, #28
 8005b6a:	bf44      	itt	mi
 8005b6c:	232b      	movmi	r3, #43	; 0x2b
 8005b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b72:	f89a 3000 	ldrb.w	r3, [sl]
 8005b76:	2b2a      	cmp	r3, #42	; 0x2a
 8005b78:	d015      	beq.n	8005ba6 <_svfiprintf_r+0xf6>
 8005b7a:	9a07      	ldr	r2, [sp, #28]
 8005b7c:	4654      	mov	r4, sl
 8005b7e:	2000      	movs	r0, #0
 8005b80:	f04f 0c0a 	mov.w	ip, #10
 8005b84:	4621      	mov	r1, r4
 8005b86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b8a:	3b30      	subs	r3, #48	; 0x30
 8005b8c:	2b09      	cmp	r3, #9
 8005b8e:	d94e      	bls.n	8005c2e <_svfiprintf_r+0x17e>
 8005b90:	b1b0      	cbz	r0, 8005bc0 <_svfiprintf_r+0x110>
 8005b92:	9207      	str	r2, [sp, #28]
 8005b94:	e014      	b.n	8005bc0 <_svfiprintf_r+0x110>
 8005b96:	eba0 0308 	sub.w	r3, r0, r8
 8005b9a:	fa09 f303 	lsl.w	r3, r9, r3
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	9304      	str	r3, [sp, #16]
 8005ba2:	46a2      	mov	sl, r4
 8005ba4:	e7d2      	b.n	8005b4c <_svfiprintf_r+0x9c>
 8005ba6:	9b03      	ldr	r3, [sp, #12]
 8005ba8:	1d19      	adds	r1, r3, #4
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	9103      	str	r1, [sp, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	bfbb      	ittet	lt
 8005bb2:	425b      	neglt	r3, r3
 8005bb4:	f042 0202 	orrlt.w	r2, r2, #2
 8005bb8:	9307      	strge	r3, [sp, #28]
 8005bba:	9307      	strlt	r3, [sp, #28]
 8005bbc:	bfb8      	it	lt
 8005bbe:	9204      	strlt	r2, [sp, #16]
 8005bc0:	7823      	ldrb	r3, [r4, #0]
 8005bc2:	2b2e      	cmp	r3, #46	; 0x2e
 8005bc4:	d10c      	bne.n	8005be0 <_svfiprintf_r+0x130>
 8005bc6:	7863      	ldrb	r3, [r4, #1]
 8005bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8005bca:	d135      	bne.n	8005c38 <_svfiprintf_r+0x188>
 8005bcc:	9b03      	ldr	r3, [sp, #12]
 8005bce:	1d1a      	adds	r2, r3, #4
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	9203      	str	r2, [sp, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	bfb8      	it	lt
 8005bd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bdc:	3402      	adds	r4, #2
 8005bde:	9305      	str	r3, [sp, #20]
 8005be0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005cac <_svfiprintf_r+0x1fc>
 8005be4:	7821      	ldrb	r1, [r4, #0]
 8005be6:	2203      	movs	r2, #3
 8005be8:	4650      	mov	r0, sl
 8005bea:	f7fa fb11 	bl	8000210 <memchr>
 8005bee:	b140      	cbz	r0, 8005c02 <_svfiprintf_r+0x152>
 8005bf0:	2340      	movs	r3, #64	; 0x40
 8005bf2:	eba0 000a 	sub.w	r0, r0, sl
 8005bf6:	fa03 f000 	lsl.w	r0, r3, r0
 8005bfa:	9b04      	ldr	r3, [sp, #16]
 8005bfc:	4303      	orrs	r3, r0
 8005bfe:	3401      	adds	r4, #1
 8005c00:	9304      	str	r3, [sp, #16]
 8005c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c06:	4826      	ldr	r0, [pc, #152]	; (8005ca0 <_svfiprintf_r+0x1f0>)
 8005c08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c0c:	2206      	movs	r2, #6
 8005c0e:	f7fa faff 	bl	8000210 <memchr>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d038      	beq.n	8005c88 <_svfiprintf_r+0x1d8>
 8005c16:	4b23      	ldr	r3, [pc, #140]	; (8005ca4 <_svfiprintf_r+0x1f4>)
 8005c18:	bb1b      	cbnz	r3, 8005c62 <_svfiprintf_r+0x1b2>
 8005c1a:	9b03      	ldr	r3, [sp, #12]
 8005c1c:	3307      	adds	r3, #7
 8005c1e:	f023 0307 	bic.w	r3, r3, #7
 8005c22:	3308      	adds	r3, #8
 8005c24:	9303      	str	r3, [sp, #12]
 8005c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c28:	4433      	add	r3, r6
 8005c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c2c:	e767      	b.n	8005afe <_svfiprintf_r+0x4e>
 8005c2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c32:	460c      	mov	r4, r1
 8005c34:	2001      	movs	r0, #1
 8005c36:	e7a5      	b.n	8005b84 <_svfiprintf_r+0xd4>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	3401      	adds	r4, #1
 8005c3c:	9305      	str	r3, [sp, #20]
 8005c3e:	4619      	mov	r1, r3
 8005c40:	f04f 0c0a 	mov.w	ip, #10
 8005c44:	4620      	mov	r0, r4
 8005c46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c4a:	3a30      	subs	r2, #48	; 0x30
 8005c4c:	2a09      	cmp	r2, #9
 8005c4e:	d903      	bls.n	8005c58 <_svfiprintf_r+0x1a8>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0c5      	beq.n	8005be0 <_svfiprintf_r+0x130>
 8005c54:	9105      	str	r1, [sp, #20]
 8005c56:	e7c3      	b.n	8005be0 <_svfiprintf_r+0x130>
 8005c58:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e7f0      	b.n	8005c44 <_svfiprintf_r+0x194>
 8005c62:	ab03      	add	r3, sp, #12
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	462a      	mov	r2, r5
 8005c68:	4b0f      	ldr	r3, [pc, #60]	; (8005ca8 <_svfiprintf_r+0x1f8>)
 8005c6a:	a904      	add	r1, sp, #16
 8005c6c:	4638      	mov	r0, r7
 8005c6e:	f3af 8000 	nop.w
 8005c72:	1c42      	adds	r2, r0, #1
 8005c74:	4606      	mov	r6, r0
 8005c76:	d1d6      	bne.n	8005c26 <_svfiprintf_r+0x176>
 8005c78:	89ab      	ldrh	r3, [r5, #12]
 8005c7a:	065b      	lsls	r3, r3, #25
 8005c7c:	f53f af2c 	bmi.w	8005ad8 <_svfiprintf_r+0x28>
 8005c80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c82:	b01d      	add	sp, #116	; 0x74
 8005c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c88:	ab03      	add	r3, sp, #12
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	462a      	mov	r2, r5
 8005c8e:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <_svfiprintf_r+0x1f8>)
 8005c90:	a904      	add	r1, sp, #16
 8005c92:	4638      	mov	r0, r7
 8005c94:	f000 f87a 	bl	8005d8c <_printf_i>
 8005c98:	e7eb      	b.n	8005c72 <_svfiprintf_r+0x1c2>
 8005c9a:	bf00      	nop
 8005c9c:	08006300 	.word	0x08006300
 8005ca0:	0800630a 	.word	0x0800630a
 8005ca4:	00000000 	.word	0x00000000
 8005ca8:	080059f9 	.word	0x080059f9
 8005cac:	08006306 	.word	0x08006306

08005cb0 <_printf_common>:
 8005cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb4:	4616      	mov	r6, r2
 8005cb6:	4699      	mov	r9, r3
 8005cb8:	688a      	ldr	r2, [r1, #8]
 8005cba:	690b      	ldr	r3, [r1, #16]
 8005cbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	bfb8      	it	lt
 8005cc4:	4613      	movlt	r3, r2
 8005cc6:	6033      	str	r3, [r6, #0]
 8005cc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ccc:	4607      	mov	r7, r0
 8005cce:	460c      	mov	r4, r1
 8005cd0:	b10a      	cbz	r2, 8005cd6 <_printf_common+0x26>
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	6033      	str	r3, [r6, #0]
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	0699      	lsls	r1, r3, #26
 8005cda:	bf42      	ittt	mi
 8005cdc:	6833      	ldrmi	r3, [r6, #0]
 8005cde:	3302      	addmi	r3, #2
 8005ce0:	6033      	strmi	r3, [r6, #0]
 8005ce2:	6825      	ldr	r5, [r4, #0]
 8005ce4:	f015 0506 	ands.w	r5, r5, #6
 8005ce8:	d106      	bne.n	8005cf8 <_printf_common+0x48>
 8005cea:	f104 0a19 	add.w	sl, r4, #25
 8005cee:	68e3      	ldr	r3, [r4, #12]
 8005cf0:	6832      	ldr	r2, [r6, #0]
 8005cf2:	1a9b      	subs	r3, r3, r2
 8005cf4:	42ab      	cmp	r3, r5
 8005cf6:	dc26      	bgt.n	8005d46 <_printf_common+0x96>
 8005cf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cfc:	1e13      	subs	r3, r2, #0
 8005cfe:	6822      	ldr	r2, [r4, #0]
 8005d00:	bf18      	it	ne
 8005d02:	2301      	movne	r3, #1
 8005d04:	0692      	lsls	r2, r2, #26
 8005d06:	d42b      	bmi.n	8005d60 <_printf_common+0xb0>
 8005d08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d0c:	4649      	mov	r1, r9
 8005d0e:	4638      	mov	r0, r7
 8005d10:	47c0      	blx	r8
 8005d12:	3001      	adds	r0, #1
 8005d14:	d01e      	beq.n	8005d54 <_printf_common+0xa4>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	68e5      	ldr	r5, [r4, #12]
 8005d1a:	6832      	ldr	r2, [r6, #0]
 8005d1c:	f003 0306 	and.w	r3, r3, #6
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	bf08      	it	eq
 8005d24:	1aad      	subeq	r5, r5, r2
 8005d26:	68a3      	ldr	r3, [r4, #8]
 8005d28:	6922      	ldr	r2, [r4, #16]
 8005d2a:	bf0c      	ite	eq
 8005d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d30:	2500      	movne	r5, #0
 8005d32:	4293      	cmp	r3, r2
 8005d34:	bfc4      	itt	gt
 8005d36:	1a9b      	subgt	r3, r3, r2
 8005d38:	18ed      	addgt	r5, r5, r3
 8005d3a:	2600      	movs	r6, #0
 8005d3c:	341a      	adds	r4, #26
 8005d3e:	42b5      	cmp	r5, r6
 8005d40:	d11a      	bne.n	8005d78 <_printf_common+0xc8>
 8005d42:	2000      	movs	r0, #0
 8005d44:	e008      	b.n	8005d58 <_printf_common+0xa8>
 8005d46:	2301      	movs	r3, #1
 8005d48:	4652      	mov	r2, sl
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	47c0      	blx	r8
 8005d50:	3001      	adds	r0, #1
 8005d52:	d103      	bne.n	8005d5c <_printf_common+0xac>
 8005d54:	f04f 30ff 	mov.w	r0, #4294967295
 8005d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d5c:	3501      	adds	r5, #1
 8005d5e:	e7c6      	b.n	8005cee <_printf_common+0x3e>
 8005d60:	18e1      	adds	r1, r4, r3
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	2030      	movs	r0, #48	; 0x30
 8005d66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d6a:	4422      	add	r2, r4
 8005d6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d74:	3302      	adds	r3, #2
 8005d76:	e7c7      	b.n	8005d08 <_printf_common+0x58>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	4622      	mov	r2, r4
 8005d7c:	4649      	mov	r1, r9
 8005d7e:	4638      	mov	r0, r7
 8005d80:	47c0      	blx	r8
 8005d82:	3001      	adds	r0, #1
 8005d84:	d0e6      	beq.n	8005d54 <_printf_common+0xa4>
 8005d86:	3601      	adds	r6, #1
 8005d88:	e7d9      	b.n	8005d3e <_printf_common+0x8e>
	...

08005d8c <_printf_i>:
 8005d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d90:	7e0f      	ldrb	r7, [r1, #24]
 8005d92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d94:	2f78      	cmp	r7, #120	; 0x78
 8005d96:	4691      	mov	r9, r2
 8005d98:	4680      	mov	r8, r0
 8005d9a:	460c      	mov	r4, r1
 8005d9c:	469a      	mov	sl, r3
 8005d9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005da2:	d807      	bhi.n	8005db4 <_printf_i+0x28>
 8005da4:	2f62      	cmp	r7, #98	; 0x62
 8005da6:	d80a      	bhi.n	8005dbe <_printf_i+0x32>
 8005da8:	2f00      	cmp	r7, #0
 8005daa:	f000 80d8 	beq.w	8005f5e <_printf_i+0x1d2>
 8005dae:	2f58      	cmp	r7, #88	; 0x58
 8005db0:	f000 80a3 	beq.w	8005efa <_printf_i+0x16e>
 8005db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005db8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005dbc:	e03a      	b.n	8005e34 <_printf_i+0xa8>
 8005dbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005dc2:	2b15      	cmp	r3, #21
 8005dc4:	d8f6      	bhi.n	8005db4 <_printf_i+0x28>
 8005dc6:	a101      	add	r1, pc, #4	; (adr r1, 8005dcc <_printf_i+0x40>)
 8005dc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dcc:	08005e25 	.word	0x08005e25
 8005dd0:	08005e39 	.word	0x08005e39
 8005dd4:	08005db5 	.word	0x08005db5
 8005dd8:	08005db5 	.word	0x08005db5
 8005ddc:	08005db5 	.word	0x08005db5
 8005de0:	08005db5 	.word	0x08005db5
 8005de4:	08005e39 	.word	0x08005e39
 8005de8:	08005db5 	.word	0x08005db5
 8005dec:	08005db5 	.word	0x08005db5
 8005df0:	08005db5 	.word	0x08005db5
 8005df4:	08005db5 	.word	0x08005db5
 8005df8:	08005f45 	.word	0x08005f45
 8005dfc:	08005e69 	.word	0x08005e69
 8005e00:	08005f27 	.word	0x08005f27
 8005e04:	08005db5 	.word	0x08005db5
 8005e08:	08005db5 	.word	0x08005db5
 8005e0c:	08005f67 	.word	0x08005f67
 8005e10:	08005db5 	.word	0x08005db5
 8005e14:	08005e69 	.word	0x08005e69
 8005e18:	08005db5 	.word	0x08005db5
 8005e1c:	08005db5 	.word	0x08005db5
 8005e20:	08005f2f 	.word	0x08005f2f
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	1d1a      	adds	r2, r3, #4
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	602a      	str	r2, [r5, #0]
 8005e2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e34:	2301      	movs	r3, #1
 8005e36:	e0a3      	b.n	8005f80 <_printf_i+0x1f4>
 8005e38:	6820      	ldr	r0, [r4, #0]
 8005e3a:	6829      	ldr	r1, [r5, #0]
 8005e3c:	0606      	lsls	r6, r0, #24
 8005e3e:	f101 0304 	add.w	r3, r1, #4
 8005e42:	d50a      	bpl.n	8005e5a <_printf_i+0xce>
 8005e44:	680e      	ldr	r6, [r1, #0]
 8005e46:	602b      	str	r3, [r5, #0]
 8005e48:	2e00      	cmp	r6, #0
 8005e4a:	da03      	bge.n	8005e54 <_printf_i+0xc8>
 8005e4c:	232d      	movs	r3, #45	; 0x2d
 8005e4e:	4276      	negs	r6, r6
 8005e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e54:	485e      	ldr	r0, [pc, #376]	; (8005fd0 <_printf_i+0x244>)
 8005e56:	230a      	movs	r3, #10
 8005e58:	e019      	b.n	8005e8e <_printf_i+0x102>
 8005e5a:	680e      	ldr	r6, [r1, #0]
 8005e5c:	602b      	str	r3, [r5, #0]
 8005e5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e62:	bf18      	it	ne
 8005e64:	b236      	sxthne	r6, r6
 8005e66:	e7ef      	b.n	8005e48 <_printf_i+0xbc>
 8005e68:	682b      	ldr	r3, [r5, #0]
 8005e6a:	6820      	ldr	r0, [r4, #0]
 8005e6c:	1d19      	adds	r1, r3, #4
 8005e6e:	6029      	str	r1, [r5, #0]
 8005e70:	0601      	lsls	r1, r0, #24
 8005e72:	d501      	bpl.n	8005e78 <_printf_i+0xec>
 8005e74:	681e      	ldr	r6, [r3, #0]
 8005e76:	e002      	b.n	8005e7e <_printf_i+0xf2>
 8005e78:	0646      	lsls	r6, r0, #25
 8005e7a:	d5fb      	bpl.n	8005e74 <_printf_i+0xe8>
 8005e7c:	881e      	ldrh	r6, [r3, #0]
 8005e7e:	4854      	ldr	r0, [pc, #336]	; (8005fd0 <_printf_i+0x244>)
 8005e80:	2f6f      	cmp	r7, #111	; 0x6f
 8005e82:	bf0c      	ite	eq
 8005e84:	2308      	moveq	r3, #8
 8005e86:	230a      	movne	r3, #10
 8005e88:	2100      	movs	r1, #0
 8005e8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e8e:	6865      	ldr	r5, [r4, #4]
 8005e90:	60a5      	str	r5, [r4, #8]
 8005e92:	2d00      	cmp	r5, #0
 8005e94:	bfa2      	ittt	ge
 8005e96:	6821      	ldrge	r1, [r4, #0]
 8005e98:	f021 0104 	bicge.w	r1, r1, #4
 8005e9c:	6021      	strge	r1, [r4, #0]
 8005e9e:	b90e      	cbnz	r6, 8005ea4 <_printf_i+0x118>
 8005ea0:	2d00      	cmp	r5, #0
 8005ea2:	d04d      	beq.n	8005f40 <_printf_i+0x1b4>
 8005ea4:	4615      	mov	r5, r2
 8005ea6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005eaa:	fb03 6711 	mls	r7, r3, r1, r6
 8005eae:	5dc7      	ldrb	r7, [r0, r7]
 8005eb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005eb4:	4637      	mov	r7, r6
 8005eb6:	42bb      	cmp	r3, r7
 8005eb8:	460e      	mov	r6, r1
 8005eba:	d9f4      	bls.n	8005ea6 <_printf_i+0x11a>
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d10b      	bne.n	8005ed8 <_printf_i+0x14c>
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	07de      	lsls	r6, r3, #31
 8005ec4:	d508      	bpl.n	8005ed8 <_printf_i+0x14c>
 8005ec6:	6923      	ldr	r3, [r4, #16]
 8005ec8:	6861      	ldr	r1, [r4, #4]
 8005eca:	4299      	cmp	r1, r3
 8005ecc:	bfde      	ittt	le
 8005ece:	2330      	movle	r3, #48	; 0x30
 8005ed0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ed4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ed8:	1b52      	subs	r2, r2, r5
 8005eda:	6122      	str	r2, [r4, #16]
 8005edc:	f8cd a000 	str.w	sl, [sp]
 8005ee0:	464b      	mov	r3, r9
 8005ee2:	aa03      	add	r2, sp, #12
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	4640      	mov	r0, r8
 8005ee8:	f7ff fee2 	bl	8005cb0 <_printf_common>
 8005eec:	3001      	adds	r0, #1
 8005eee:	d14c      	bne.n	8005f8a <_printf_i+0x1fe>
 8005ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef4:	b004      	add	sp, #16
 8005ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005efa:	4835      	ldr	r0, [pc, #212]	; (8005fd0 <_printf_i+0x244>)
 8005efc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f00:	6829      	ldr	r1, [r5, #0]
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f08:	6029      	str	r1, [r5, #0]
 8005f0a:	061d      	lsls	r5, r3, #24
 8005f0c:	d514      	bpl.n	8005f38 <_printf_i+0x1ac>
 8005f0e:	07df      	lsls	r7, r3, #31
 8005f10:	bf44      	itt	mi
 8005f12:	f043 0320 	orrmi.w	r3, r3, #32
 8005f16:	6023      	strmi	r3, [r4, #0]
 8005f18:	b91e      	cbnz	r6, 8005f22 <_printf_i+0x196>
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	f023 0320 	bic.w	r3, r3, #32
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	2310      	movs	r3, #16
 8005f24:	e7b0      	b.n	8005e88 <_printf_i+0xfc>
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	f043 0320 	orr.w	r3, r3, #32
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	2378      	movs	r3, #120	; 0x78
 8005f30:	4828      	ldr	r0, [pc, #160]	; (8005fd4 <_printf_i+0x248>)
 8005f32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f36:	e7e3      	b.n	8005f00 <_printf_i+0x174>
 8005f38:	0659      	lsls	r1, r3, #25
 8005f3a:	bf48      	it	mi
 8005f3c:	b2b6      	uxthmi	r6, r6
 8005f3e:	e7e6      	b.n	8005f0e <_printf_i+0x182>
 8005f40:	4615      	mov	r5, r2
 8005f42:	e7bb      	b.n	8005ebc <_printf_i+0x130>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	6826      	ldr	r6, [r4, #0]
 8005f48:	6961      	ldr	r1, [r4, #20]
 8005f4a:	1d18      	adds	r0, r3, #4
 8005f4c:	6028      	str	r0, [r5, #0]
 8005f4e:	0635      	lsls	r5, r6, #24
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	d501      	bpl.n	8005f58 <_printf_i+0x1cc>
 8005f54:	6019      	str	r1, [r3, #0]
 8005f56:	e002      	b.n	8005f5e <_printf_i+0x1d2>
 8005f58:	0670      	lsls	r0, r6, #25
 8005f5a:	d5fb      	bpl.n	8005f54 <_printf_i+0x1c8>
 8005f5c:	8019      	strh	r1, [r3, #0]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	6123      	str	r3, [r4, #16]
 8005f62:	4615      	mov	r5, r2
 8005f64:	e7ba      	b.n	8005edc <_printf_i+0x150>
 8005f66:	682b      	ldr	r3, [r5, #0]
 8005f68:	1d1a      	adds	r2, r3, #4
 8005f6a:	602a      	str	r2, [r5, #0]
 8005f6c:	681d      	ldr	r5, [r3, #0]
 8005f6e:	6862      	ldr	r2, [r4, #4]
 8005f70:	2100      	movs	r1, #0
 8005f72:	4628      	mov	r0, r5
 8005f74:	f7fa f94c 	bl	8000210 <memchr>
 8005f78:	b108      	cbz	r0, 8005f7e <_printf_i+0x1f2>
 8005f7a:	1b40      	subs	r0, r0, r5
 8005f7c:	6060      	str	r0, [r4, #4]
 8005f7e:	6863      	ldr	r3, [r4, #4]
 8005f80:	6123      	str	r3, [r4, #16]
 8005f82:	2300      	movs	r3, #0
 8005f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f88:	e7a8      	b.n	8005edc <_printf_i+0x150>
 8005f8a:	6923      	ldr	r3, [r4, #16]
 8005f8c:	462a      	mov	r2, r5
 8005f8e:	4649      	mov	r1, r9
 8005f90:	4640      	mov	r0, r8
 8005f92:	47d0      	blx	sl
 8005f94:	3001      	adds	r0, #1
 8005f96:	d0ab      	beq.n	8005ef0 <_printf_i+0x164>
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	079b      	lsls	r3, r3, #30
 8005f9c:	d413      	bmi.n	8005fc6 <_printf_i+0x23a>
 8005f9e:	68e0      	ldr	r0, [r4, #12]
 8005fa0:	9b03      	ldr	r3, [sp, #12]
 8005fa2:	4298      	cmp	r0, r3
 8005fa4:	bfb8      	it	lt
 8005fa6:	4618      	movlt	r0, r3
 8005fa8:	e7a4      	b.n	8005ef4 <_printf_i+0x168>
 8005faa:	2301      	movs	r3, #1
 8005fac:	4632      	mov	r2, r6
 8005fae:	4649      	mov	r1, r9
 8005fb0:	4640      	mov	r0, r8
 8005fb2:	47d0      	blx	sl
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	d09b      	beq.n	8005ef0 <_printf_i+0x164>
 8005fb8:	3501      	adds	r5, #1
 8005fba:	68e3      	ldr	r3, [r4, #12]
 8005fbc:	9903      	ldr	r1, [sp, #12]
 8005fbe:	1a5b      	subs	r3, r3, r1
 8005fc0:	42ab      	cmp	r3, r5
 8005fc2:	dcf2      	bgt.n	8005faa <_printf_i+0x21e>
 8005fc4:	e7eb      	b.n	8005f9e <_printf_i+0x212>
 8005fc6:	2500      	movs	r5, #0
 8005fc8:	f104 0619 	add.w	r6, r4, #25
 8005fcc:	e7f5      	b.n	8005fba <_printf_i+0x22e>
 8005fce:	bf00      	nop
 8005fd0:	08006311 	.word	0x08006311
 8005fd4:	08006322 	.word	0x08006322

08005fd8 <memcpy>:
 8005fd8:	440a      	add	r2, r1
 8005fda:	4291      	cmp	r1, r2
 8005fdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fe0:	d100      	bne.n	8005fe4 <memcpy+0xc>
 8005fe2:	4770      	bx	lr
 8005fe4:	b510      	push	{r4, lr}
 8005fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fee:	4291      	cmp	r1, r2
 8005ff0:	d1f9      	bne.n	8005fe6 <memcpy+0xe>
 8005ff2:	bd10      	pop	{r4, pc}

08005ff4 <memmove>:
 8005ff4:	4288      	cmp	r0, r1
 8005ff6:	b510      	push	{r4, lr}
 8005ff8:	eb01 0402 	add.w	r4, r1, r2
 8005ffc:	d902      	bls.n	8006004 <memmove+0x10>
 8005ffe:	4284      	cmp	r4, r0
 8006000:	4623      	mov	r3, r4
 8006002:	d807      	bhi.n	8006014 <memmove+0x20>
 8006004:	1e43      	subs	r3, r0, #1
 8006006:	42a1      	cmp	r1, r4
 8006008:	d008      	beq.n	800601c <memmove+0x28>
 800600a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800600e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006012:	e7f8      	b.n	8006006 <memmove+0x12>
 8006014:	4402      	add	r2, r0
 8006016:	4601      	mov	r1, r0
 8006018:	428a      	cmp	r2, r1
 800601a:	d100      	bne.n	800601e <memmove+0x2a>
 800601c:	bd10      	pop	{r4, pc}
 800601e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006026:	e7f7      	b.n	8006018 <memmove+0x24>

08006028 <_free_r>:
 8006028:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800602a:	2900      	cmp	r1, #0
 800602c:	d044      	beq.n	80060b8 <_free_r+0x90>
 800602e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006032:	9001      	str	r0, [sp, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	f1a1 0404 	sub.w	r4, r1, #4
 800603a:	bfb8      	it	lt
 800603c:	18e4      	addlt	r4, r4, r3
 800603e:	f000 f913 	bl	8006268 <__malloc_lock>
 8006042:	4a1e      	ldr	r2, [pc, #120]	; (80060bc <_free_r+0x94>)
 8006044:	9801      	ldr	r0, [sp, #4]
 8006046:	6813      	ldr	r3, [r2, #0]
 8006048:	b933      	cbnz	r3, 8006058 <_free_r+0x30>
 800604a:	6063      	str	r3, [r4, #4]
 800604c:	6014      	str	r4, [r2, #0]
 800604e:	b003      	add	sp, #12
 8006050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006054:	f000 b90e 	b.w	8006274 <__malloc_unlock>
 8006058:	42a3      	cmp	r3, r4
 800605a:	d908      	bls.n	800606e <_free_r+0x46>
 800605c:	6825      	ldr	r5, [r4, #0]
 800605e:	1961      	adds	r1, r4, r5
 8006060:	428b      	cmp	r3, r1
 8006062:	bf01      	itttt	eq
 8006064:	6819      	ldreq	r1, [r3, #0]
 8006066:	685b      	ldreq	r3, [r3, #4]
 8006068:	1949      	addeq	r1, r1, r5
 800606a:	6021      	streq	r1, [r4, #0]
 800606c:	e7ed      	b.n	800604a <_free_r+0x22>
 800606e:	461a      	mov	r2, r3
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	b10b      	cbz	r3, 8006078 <_free_r+0x50>
 8006074:	42a3      	cmp	r3, r4
 8006076:	d9fa      	bls.n	800606e <_free_r+0x46>
 8006078:	6811      	ldr	r1, [r2, #0]
 800607a:	1855      	adds	r5, r2, r1
 800607c:	42a5      	cmp	r5, r4
 800607e:	d10b      	bne.n	8006098 <_free_r+0x70>
 8006080:	6824      	ldr	r4, [r4, #0]
 8006082:	4421      	add	r1, r4
 8006084:	1854      	adds	r4, r2, r1
 8006086:	42a3      	cmp	r3, r4
 8006088:	6011      	str	r1, [r2, #0]
 800608a:	d1e0      	bne.n	800604e <_free_r+0x26>
 800608c:	681c      	ldr	r4, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	6053      	str	r3, [r2, #4]
 8006092:	4421      	add	r1, r4
 8006094:	6011      	str	r1, [r2, #0]
 8006096:	e7da      	b.n	800604e <_free_r+0x26>
 8006098:	d902      	bls.n	80060a0 <_free_r+0x78>
 800609a:	230c      	movs	r3, #12
 800609c:	6003      	str	r3, [r0, #0]
 800609e:	e7d6      	b.n	800604e <_free_r+0x26>
 80060a0:	6825      	ldr	r5, [r4, #0]
 80060a2:	1961      	adds	r1, r4, r5
 80060a4:	428b      	cmp	r3, r1
 80060a6:	bf04      	itt	eq
 80060a8:	6819      	ldreq	r1, [r3, #0]
 80060aa:	685b      	ldreq	r3, [r3, #4]
 80060ac:	6063      	str	r3, [r4, #4]
 80060ae:	bf04      	itt	eq
 80060b0:	1949      	addeq	r1, r1, r5
 80060b2:	6021      	streq	r1, [r4, #0]
 80060b4:	6054      	str	r4, [r2, #4]
 80060b6:	e7ca      	b.n	800604e <_free_r+0x26>
 80060b8:	b003      	add	sp, #12
 80060ba:	bd30      	pop	{r4, r5, pc}
 80060bc:	200003a0 	.word	0x200003a0

080060c0 <sbrk_aligned>:
 80060c0:	b570      	push	{r4, r5, r6, lr}
 80060c2:	4e0e      	ldr	r6, [pc, #56]	; (80060fc <sbrk_aligned+0x3c>)
 80060c4:	460c      	mov	r4, r1
 80060c6:	6831      	ldr	r1, [r6, #0]
 80060c8:	4605      	mov	r5, r0
 80060ca:	b911      	cbnz	r1, 80060d2 <sbrk_aligned+0x12>
 80060cc:	f000 f8bc 	bl	8006248 <_sbrk_r>
 80060d0:	6030      	str	r0, [r6, #0]
 80060d2:	4621      	mov	r1, r4
 80060d4:	4628      	mov	r0, r5
 80060d6:	f000 f8b7 	bl	8006248 <_sbrk_r>
 80060da:	1c43      	adds	r3, r0, #1
 80060dc:	d00a      	beq.n	80060f4 <sbrk_aligned+0x34>
 80060de:	1cc4      	adds	r4, r0, #3
 80060e0:	f024 0403 	bic.w	r4, r4, #3
 80060e4:	42a0      	cmp	r0, r4
 80060e6:	d007      	beq.n	80060f8 <sbrk_aligned+0x38>
 80060e8:	1a21      	subs	r1, r4, r0
 80060ea:	4628      	mov	r0, r5
 80060ec:	f000 f8ac 	bl	8006248 <_sbrk_r>
 80060f0:	3001      	adds	r0, #1
 80060f2:	d101      	bne.n	80060f8 <sbrk_aligned+0x38>
 80060f4:	f04f 34ff 	mov.w	r4, #4294967295
 80060f8:	4620      	mov	r0, r4
 80060fa:	bd70      	pop	{r4, r5, r6, pc}
 80060fc:	200003a4 	.word	0x200003a4

08006100 <_malloc_r>:
 8006100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006104:	1ccd      	adds	r5, r1, #3
 8006106:	f025 0503 	bic.w	r5, r5, #3
 800610a:	3508      	adds	r5, #8
 800610c:	2d0c      	cmp	r5, #12
 800610e:	bf38      	it	cc
 8006110:	250c      	movcc	r5, #12
 8006112:	2d00      	cmp	r5, #0
 8006114:	4607      	mov	r7, r0
 8006116:	db01      	blt.n	800611c <_malloc_r+0x1c>
 8006118:	42a9      	cmp	r1, r5
 800611a:	d905      	bls.n	8006128 <_malloc_r+0x28>
 800611c:	230c      	movs	r3, #12
 800611e:	603b      	str	r3, [r7, #0]
 8006120:	2600      	movs	r6, #0
 8006122:	4630      	mov	r0, r6
 8006124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006128:	4e2e      	ldr	r6, [pc, #184]	; (80061e4 <_malloc_r+0xe4>)
 800612a:	f000 f89d 	bl	8006268 <__malloc_lock>
 800612e:	6833      	ldr	r3, [r6, #0]
 8006130:	461c      	mov	r4, r3
 8006132:	bb34      	cbnz	r4, 8006182 <_malloc_r+0x82>
 8006134:	4629      	mov	r1, r5
 8006136:	4638      	mov	r0, r7
 8006138:	f7ff ffc2 	bl	80060c0 <sbrk_aligned>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	4604      	mov	r4, r0
 8006140:	d14d      	bne.n	80061de <_malloc_r+0xde>
 8006142:	6834      	ldr	r4, [r6, #0]
 8006144:	4626      	mov	r6, r4
 8006146:	2e00      	cmp	r6, #0
 8006148:	d140      	bne.n	80061cc <_malloc_r+0xcc>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	4631      	mov	r1, r6
 800614e:	4638      	mov	r0, r7
 8006150:	eb04 0803 	add.w	r8, r4, r3
 8006154:	f000 f878 	bl	8006248 <_sbrk_r>
 8006158:	4580      	cmp	r8, r0
 800615a:	d13a      	bne.n	80061d2 <_malloc_r+0xd2>
 800615c:	6821      	ldr	r1, [r4, #0]
 800615e:	3503      	adds	r5, #3
 8006160:	1a6d      	subs	r5, r5, r1
 8006162:	f025 0503 	bic.w	r5, r5, #3
 8006166:	3508      	adds	r5, #8
 8006168:	2d0c      	cmp	r5, #12
 800616a:	bf38      	it	cc
 800616c:	250c      	movcc	r5, #12
 800616e:	4629      	mov	r1, r5
 8006170:	4638      	mov	r0, r7
 8006172:	f7ff ffa5 	bl	80060c0 <sbrk_aligned>
 8006176:	3001      	adds	r0, #1
 8006178:	d02b      	beq.n	80061d2 <_malloc_r+0xd2>
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	442b      	add	r3, r5
 800617e:	6023      	str	r3, [r4, #0]
 8006180:	e00e      	b.n	80061a0 <_malloc_r+0xa0>
 8006182:	6822      	ldr	r2, [r4, #0]
 8006184:	1b52      	subs	r2, r2, r5
 8006186:	d41e      	bmi.n	80061c6 <_malloc_r+0xc6>
 8006188:	2a0b      	cmp	r2, #11
 800618a:	d916      	bls.n	80061ba <_malloc_r+0xba>
 800618c:	1961      	adds	r1, r4, r5
 800618e:	42a3      	cmp	r3, r4
 8006190:	6025      	str	r5, [r4, #0]
 8006192:	bf18      	it	ne
 8006194:	6059      	strne	r1, [r3, #4]
 8006196:	6863      	ldr	r3, [r4, #4]
 8006198:	bf08      	it	eq
 800619a:	6031      	streq	r1, [r6, #0]
 800619c:	5162      	str	r2, [r4, r5]
 800619e:	604b      	str	r3, [r1, #4]
 80061a0:	4638      	mov	r0, r7
 80061a2:	f104 060b 	add.w	r6, r4, #11
 80061a6:	f000 f865 	bl	8006274 <__malloc_unlock>
 80061aa:	f026 0607 	bic.w	r6, r6, #7
 80061ae:	1d23      	adds	r3, r4, #4
 80061b0:	1af2      	subs	r2, r6, r3
 80061b2:	d0b6      	beq.n	8006122 <_malloc_r+0x22>
 80061b4:	1b9b      	subs	r3, r3, r6
 80061b6:	50a3      	str	r3, [r4, r2]
 80061b8:	e7b3      	b.n	8006122 <_malloc_r+0x22>
 80061ba:	6862      	ldr	r2, [r4, #4]
 80061bc:	42a3      	cmp	r3, r4
 80061be:	bf0c      	ite	eq
 80061c0:	6032      	streq	r2, [r6, #0]
 80061c2:	605a      	strne	r2, [r3, #4]
 80061c4:	e7ec      	b.n	80061a0 <_malloc_r+0xa0>
 80061c6:	4623      	mov	r3, r4
 80061c8:	6864      	ldr	r4, [r4, #4]
 80061ca:	e7b2      	b.n	8006132 <_malloc_r+0x32>
 80061cc:	4634      	mov	r4, r6
 80061ce:	6876      	ldr	r6, [r6, #4]
 80061d0:	e7b9      	b.n	8006146 <_malloc_r+0x46>
 80061d2:	230c      	movs	r3, #12
 80061d4:	603b      	str	r3, [r7, #0]
 80061d6:	4638      	mov	r0, r7
 80061d8:	f000 f84c 	bl	8006274 <__malloc_unlock>
 80061dc:	e7a1      	b.n	8006122 <_malloc_r+0x22>
 80061de:	6025      	str	r5, [r4, #0]
 80061e0:	e7de      	b.n	80061a0 <_malloc_r+0xa0>
 80061e2:	bf00      	nop
 80061e4:	200003a0 	.word	0x200003a0

080061e8 <_realloc_r>:
 80061e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ec:	4680      	mov	r8, r0
 80061ee:	4614      	mov	r4, r2
 80061f0:	460e      	mov	r6, r1
 80061f2:	b921      	cbnz	r1, 80061fe <_realloc_r+0x16>
 80061f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061f8:	4611      	mov	r1, r2
 80061fa:	f7ff bf81 	b.w	8006100 <_malloc_r>
 80061fe:	b92a      	cbnz	r2, 800620c <_realloc_r+0x24>
 8006200:	f7ff ff12 	bl	8006028 <_free_r>
 8006204:	4625      	mov	r5, r4
 8006206:	4628      	mov	r0, r5
 8006208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800620c:	f000 f838 	bl	8006280 <_malloc_usable_size_r>
 8006210:	4284      	cmp	r4, r0
 8006212:	4607      	mov	r7, r0
 8006214:	d802      	bhi.n	800621c <_realloc_r+0x34>
 8006216:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800621a:	d812      	bhi.n	8006242 <_realloc_r+0x5a>
 800621c:	4621      	mov	r1, r4
 800621e:	4640      	mov	r0, r8
 8006220:	f7ff ff6e 	bl	8006100 <_malloc_r>
 8006224:	4605      	mov	r5, r0
 8006226:	2800      	cmp	r0, #0
 8006228:	d0ed      	beq.n	8006206 <_realloc_r+0x1e>
 800622a:	42bc      	cmp	r4, r7
 800622c:	4622      	mov	r2, r4
 800622e:	4631      	mov	r1, r6
 8006230:	bf28      	it	cs
 8006232:	463a      	movcs	r2, r7
 8006234:	f7ff fed0 	bl	8005fd8 <memcpy>
 8006238:	4631      	mov	r1, r6
 800623a:	4640      	mov	r0, r8
 800623c:	f7ff fef4 	bl	8006028 <_free_r>
 8006240:	e7e1      	b.n	8006206 <_realloc_r+0x1e>
 8006242:	4635      	mov	r5, r6
 8006244:	e7df      	b.n	8006206 <_realloc_r+0x1e>
	...

08006248 <_sbrk_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4d06      	ldr	r5, [pc, #24]	; (8006264 <_sbrk_r+0x1c>)
 800624c:	2300      	movs	r3, #0
 800624e:	4604      	mov	r4, r0
 8006250:	4608      	mov	r0, r1
 8006252:	602b      	str	r3, [r5, #0]
 8006254:	f7fb fad2 	bl	80017fc <_sbrk>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d102      	bne.n	8006262 <_sbrk_r+0x1a>
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	b103      	cbz	r3, 8006262 <_sbrk_r+0x1a>
 8006260:	6023      	str	r3, [r4, #0]
 8006262:	bd38      	pop	{r3, r4, r5, pc}
 8006264:	200003a8 	.word	0x200003a8

08006268 <__malloc_lock>:
 8006268:	4801      	ldr	r0, [pc, #4]	; (8006270 <__malloc_lock+0x8>)
 800626a:	f000 b811 	b.w	8006290 <__retarget_lock_acquire_recursive>
 800626e:	bf00      	nop
 8006270:	200003ac 	.word	0x200003ac

08006274 <__malloc_unlock>:
 8006274:	4801      	ldr	r0, [pc, #4]	; (800627c <__malloc_unlock+0x8>)
 8006276:	f000 b80c 	b.w	8006292 <__retarget_lock_release_recursive>
 800627a:	bf00      	nop
 800627c:	200003ac 	.word	0x200003ac

08006280 <_malloc_usable_size_r>:
 8006280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006284:	1f18      	subs	r0, r3, #4
 8006286:	2b00      	cmp	r3, #0
 8006288:	bfbc      	itt	lt
 800628a:	580b      	ldrlt	r3, [r1, r0]
 800628c:	18c0      	addlt	r0, r0, r3
 800628e:	4770      	bx	lr

08006290 <__retarget_lock_acquire_recursive>:
 8006290:	4770      	bx	lr

08006292 <__retarget_lock_release_recursive>:
 8006292:	4770      	bx	lr

08006294 <_init>:
 8006294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006296:	bf00      	nop
 8006298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629a:	bc08      	pop	{r3}
 800629c:	469e      	mov	lr, r3
 800629e:	4770      	bx	lr

080062a0 <_fini>:
 80062a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a2:	bf00      	nop
 80062a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a6:	bc08      	pop	{r3}
 80062a8:	469e      	mov	lr, r3
 80062aa:	4770      	bx	lr
